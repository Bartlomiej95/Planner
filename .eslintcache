[{"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\MainSection.tsx":"1","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\LoginSection.tsx":"2","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\RegisterSection.tsx":"3","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\ArchivesCard\\ArchivesCard.tsx":"4","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\Form\\RegisterForm.tsx":"5","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\Label\\Label.tsx":"6","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\TaskCard\\TaskCard.tsx":"7","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\InnerUserNavbar\\InnerUserNavbar.tsx":"8","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\interfaces\\Users\\Users.ts":"9","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\index.ts":"10","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\App.tsx":"11","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Users\\reducer.ts":"12","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Users\\authReducer.ts":"13","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Projects\\reducer.ts":"14","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Errors\\reducer.ts":"15","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Tasks\\reducer.ts":"16","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Departments\\reducer.ts":"17","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Rates\\reducer.ts":"18","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\theme\\mainTheme.ts":"19","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\theme\\GlobalStyle.ts":"20","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\UserPage.tsx":"21","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\LogoutPage.tsx":"22","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\HomePage.tsx":"23","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\RegisterPage.tsx":"24","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\LogInPage.tsx":"25","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\CreateProject.tsx":"26","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\DetailsProject.tsx":"27","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\TasksToProject.tsx":"28","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\util\\domain.ts":"29","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Users\\constants.ts":"30","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Errors\\constants.ts":"31","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Projects\\constans.ts":"32","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Tasks\\constants.ts":"33","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Rates\\constants.ts":"34","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Departments\\actions.ts":"35","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Projects\\actions.ts":"36","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Users\\actions.ts":"37","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Tasks\\actions.ts":"38","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\LogoutSection.tsx":"39","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\Header.tsx":"40","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\Footer.tsx":"41","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\JoinUsSection.tsx":"42","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\FAQSection.tsx":"43","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\ProfileSection.tsx":"44","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\PlannerFunc.tsx":"45","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\Banner.tsx":"46","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\ProfitabilityProjectSection.tsx":"47","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\LabelSection.tsx":"48","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\components\\Input\\Input.tsx":"49","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\components\\TextArea\\TextArea.tsx":"50","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\ErrorMessage\\ErrorMessage.tsx":"51","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\components\\Paragraph\\Paragraph.tsx":"52","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\components\\Button\\Button.tsx":"53","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\components\\Heading\\Heading.tsx":"54","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\PersonToProject\\PersonToProject.tsx":"55","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\LoadingWrapper\\LoadingWrapper.tsx":"56","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Departments\\constants.ts":"57","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\api\\index.ts":"58","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\HiddenMenu.tsx":"59","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\RatesSection.tsx":"60","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\ProjectCard\\ProjectCard.tsx":"61","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\QAPlannerCard\\QAPlannerCard.tsx":"62","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\SliderTheme\\SliderTheme.tsx":"63","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\ProfabilityRow\\ProfabilityRow.tsx":"64","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\FuncPlannerCard\\FuncPlannerCard.tsx":"65","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\Card\\Card.tsx":"66","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\RateRow\\RateRow.tsx":"67","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Rates\\actions.ts":"68","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\TasksSection.tsx":"69","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\index.tsx":"70","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\context\\theme.tsx":"71","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\context\\UserContext.tsx":"72","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\data\\index.ts":"73","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\MessagesPage.tsx":"74","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\MessageCard\\MessageCard.tsx":"75","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\CreateMessagePage.tsx":"76","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Messages\\reducer.ts":"77","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Messages\\constants.ts":"78","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Messages\\actions.ts":"79","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\DetailsMessage.tsx":"80"},{"size":8392,"mtime":1621676861367,"results":"81","hashOfConfig":"82"},{"size":4528,"mtime":1621676861364,"results":"83","hashOfConfig":"82"},{"size":551,"mtime":1613322610294,"results":"84","hashOfConfig":"82"},{"size":4227,"mtime":1621676861335,"results":"85","hashOfConfig":"82"},{"size":3096,"mtime":1622144678009,"results":"86","hashOfConfig":"82"},{"size":2542,"mtime":1621676861343,"results":"87","hashOfConfig":"82"},{"size":5750,"mtime":1621676861354,"results":"88","hashOfConfig":"82"},{"size":4754,"mtime":1618856772230,"results":"89","hashOfConfig":"82"},{"size":228,"mtime":1620942391940,"results":"90","hashOfConfig":"82"},{"size":525,"mtime":1626204067125,"results":"91","hashOfConfig":"82"},{"size":2452,"mtime":1626595097504,"results":"92","hashOfConfig":"82"},{"size":526,"mtime":1621676861393,"results":"93","hashOfConfig":"82"},{"size":418,"mtime":1621676861392,"results":"94","hashOfConfig":"82"},{"size":1643,"mtime":1621676861382,"results":"95","hashOfConfig":"82"},{"size":639,"mtime":1621676861379,"results":"96","hashOfConfig":"82"},{"size":3530,"mtime":1621676861389,"results":"97","hashOfConfig":"82"},{"size":1170,"mtime":1621676861376,"results":"98","hashOfConfig":"82"},{"size":658,"mtime":1621676861385,"results":"99","hashOfConfig":"82"},{"size":1333,"mtime":1625435146536,"results":"100","hashOfConfig":"82"},{"size":309,"mtime":1621676861395,"results":"101","hashOfConfig":"82"},{"size":413,"mtime":1621676861404,"results":"102","hashOfConfig":"82"},{"size":335,"mtime":1621676861402,"results":"103","hashOfConfig":"82"},{"size":709,"mtime":1621676861401,"results":"104","hashOfConfig":"82"},{"size":380,"mtime":1621676861402,"results":"105","hashOfConfig":"82"},{"size":364,"mtime":1621676861401,"results":"106","hashOfConfig":"82"},{"size":12632,"mtime":1626290497113,"results":"107","hashOfConfig":"82"},{"size":4098,"mtime":1625927853906,"results":"108","hashOfConfig":"82"},{"size":9278,"mtime":1621676861403,"results":"109","hashOfConfig":"82"},{"size":159,"mtime":1621676861397,"results":"110","hashOfConfig":"82"},{"size":192,"mtime":1621676861392,"results":"111","hashOfConfig":"82"},{"size":308,"mtime":1621676861378,"results":"112","hashOfConfig":"82"},{"size":312,"mtime":1621676861382,"results":"113","hashOfConfig":"82"},{"size":374,"mtime":1621676861388,"results":"114","hashOfConfig":"82"},{"size":122,"mtime":1621676861385,"results":"115","hashOfConfig":"82"},{"size":1257,"mtime":1621676861372,"results":"116","hashOfConfig":"82"},{"size":2893,"mtime":1621676861380,"results":"117","hashOfConfig":"82"},{"size":2308,"mtime":1622144674001,"results":"118","hashOfConfig":"82"},{"size":3012,"mtime":1621676861387,"results":"119","hashOfConfig":"82"},{"size":2136,"mtime":1621676861365,"results":"120","hashOfConfig":"82"},{"size":3383,"mtime":1626537827170,"results":"121","hashOfConfig":"82"},{"size":520,"mtime":1626372389276,"results":"122","hashOfConfig":"82"},{"size":770,"mtime":1621676861362,"results":"123","hashOfConfig":"82"},{"size":978,"mtime":1622136363653,"results":"124","hashOfConfig":"82"},{"size":2917,"mtime":1621676861368,"results":"125","hashOfConfig":"82"},{"size":1358,"mtime":1625690210781,"results":"126","hashOfConfig":"82"},{"size":3204,"mtime":1622391712337,"results":"127","hashOfConfig":"82"},{"size":2523,"mtime":1625951108974,"results":"128","hashOfConfig":"82"},{"size":3093,"mtime":1621676861363,"results":"129","hashOfConfig":"82"},{"size":514,"mtime":1621676861319,"results":"130","hashOfConfig":"82"},{"size":365,"mtime":1621676861321,"results":"131","hashOfConfig":"82"},{"size":547,"mtime":1621676861337,"results":"132","hashOfConfig":"82"},{"size":504,"mtime":1621676861320,"results":"133","hashOfConfig":"82"},{"size":1259,"mtime":1621676861316,"results":"134","hashOfConfig":"82"},{"size":809,"mtime":1621676861318,"results":"135","hashOfConfig":"82"},{"size":3386,"mtime":1621676861346,"results":"136","hashOfConfig":"82"},{"size":691,"mtime":1621676861344,"results":"137","hashOfConfig":"82"},{"size":202,"mtime":1621676861374,"results":"138","hashOfConfig":"82"},{"size":2563,"mtime":1627405902251,"results":"139","hashOfConfig":"82"},{"size":2088,"mtime":1621676861361,"results":"140","hashOfConfig":"82"},{"size":1613,"mtime":1621676861370,"results":"141","hashOfConfig":"82"},{"size":4767,"mtime":1621676861349,"results":"142","hashOfConfig":"82"},{"size":2170,"mtime":1622392010384,"results":"143","hashOfConfig":"82"},{"size":3896,"mtime":1621676861352,"results":"144","hashOfConfig":"82"},{"size":3230,"mtime":1625995204330,"results":"145","hashOfConfig":"82"},{"size":970,"mtime":1625690198937,"results":"146","hashOfConfig":"82"},{"size":1436,"mtime":1625692672375,"results":"147","hashOfConfig":"82"},{"size":3281,"mtime":1621676861351,"results":"148","hashOfConfig":"82"},{"size":793,"mtime":1621676861383,"results":"149","hashOfConfig":"82"},{"size":2225,"mtime":1621676861371,"results":"150","hashOfConfig":"82"},{"size":1808,"mtime":1621676861325,"results":"151","hashOfConfig":"82"},{"size":877,"mtime":1621676861324,"results":"152","hashOfConfig":"82"},{"size":1020,"mtime":1621676861323,"results":"153","hashOfConfig":"82"},{"size":2010,"mtime":1622134261104,"results":"154","hashOfConfig":"82"},{"size":3596,"mtime":1627491829231,"results":"155","hashOfConfig":"82"},{"size":1643,"mtime":1627491823767,"results":"156","hashOfConfig":"82"},{"size":5663,"mtime":1627409994819,"results":"157","hashOfConfig":"82"},{"size":680,"mtime":1626367484959,"results":"158","hashOfConfig":"82"},{"size":150,"mtime":1626203544728,"results":"159","hashOfConfig":"82"},{"size":1115,"mtime":1627410284386,"results":"160","hashOfConfig":"82"},{"size":4484,"mtime":1627492390092,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"165"},"1pfl46n",{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"165"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"165"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"165"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"165"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"165"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"165"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"165"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"165"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"165"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"165"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"165"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"165"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"165"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"165"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"165"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"165"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"165"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"165"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"165"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"165"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"165"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"165"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"165"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"165"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"165"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"165"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"165"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"165"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\MainSection.tsx",["352","353","354"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport ProjectCard from '../molecules/ProjectCard/ProjectCard';\r\nimport ArchivesCard from '../molecules/ArchivesCard/ArchivesCard';\r\nimport TasksSection from './TasksSection';\r\nimport InnerUserNavbar from '../molecules/InnerUserNavbar/InnerUserNavbar';\r\nimport UserContext from '../context/UserContext';\r\nimport RatesSection from './RatesSection';\r\nimport DefaultRootState from '../interfaces/DefaultRootState/DefaultRootState';\r\nimport { SubHeading } from '../components/Heading/Heading';\r\nimport { Paragraph } from '../components/Paragraph/Paragraph';\r\nimport { fetchAllProjects, fetchData } from '../store/Projects/actions';\r\nimport { LoginButton, IdLoginButton } from '../components/Button/Button';\r\nimport { ThemeContext, ThemeType } from '../context/theme';\r\nimport { fetchAllDepartments } from '../store/Departments/actions';\r\n\r\nconst Wrapper = styled.main<{ readonly typeTheme: any}>`\r\n    min-height: 100vh;\r\n    background-color: ${ props => props.typeTheme === ThemeType.Light ? '#F9FAFF' : '#09131D'};\r\n    z-index: -2; \r\n`;\r\n\r\nconst WrapperProjectCard = styled.div`\r\n    width: 100%;\r\n    margin-top: 42px;\r\n`;\r\n\r\nconst WrapperHelpdeskInfo = styled.div`\r\n    width: 50%;\r\n    height: 200px;\r\n    margin: 0 auto;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst ParagraphHelpdesk = styled(Paragraph)<{readonly typeTheme: string}>`\r\n    margin-top: 14px;\r\n    color: ${ props => props.typeTheme === ThemeType.Light ? 'black' : 'white'};\r\n`;\r\n\r\nconst SpanHelpdesk = styled.span`\r\n    font-weight: 700;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst BtnCreateProject = styled(LoginButton)`\r\n    width: 214px;\r\n    margin-bottom: 45px;\r\n`;\r\n\r\nconst BtnLoadMore = styled(IdLoginButton)`\r\n    display: block;\r\n    margin: 50px auto;\r\n    width: 150px;\r\n`;\r\n\r\nconst SubHeadingHelpdesk = styled(SubHeading)<{ readonly typeTheme: string}>`\r\n    color: ${props => props.typeTheme === ThemeType.Light ? 'black' : 'white'};\r\n`;\r\n\r\nenum MainSectionType {\r\n    Project = 'project',\r\n    Archives = 'archives',\r\n    ProjectManager = \"projectManager\",\r\n    Tasks = 'tasks',\r\n    Data = 'data',\r\n}\r\n\r\nconst MainSection :React.FC = () => {\r\n\r\n    const { user, getUser } = useContext(UserContext);\r\n    const { typeTheme, ThemeType } = useContext(ThemeContext);\r\n    const [typeOfMainSection, setTypeOfMainSection] = useState(MainSectionType.Project);\r\n    const [counterClickLoadMore, setCounterClickLoadMore] = useState(0);\r\n    const projects = useSelector( (state: DefaultRootState) => state.projects.projects);\r\n    const tasks = useSelector(( state: DefaultRootState)=> state.tasks.tasks);\r\n    const history = useHistory();\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchData());\r\n        dispatch(fetchAllDepartments())\r\n        getUser();\r\n    }, []);\r\n\r\n    // dispatchujemy odpowiednią funkcję w zależności na jaką zakładkę kliknie project manager\r\n    // w zakładce project manager - musi zarządzać wszystkimi projektami\r\n    // z kolei w zakładce projekty - musi widzieć tylko projekty do których sam należy\r\n    useEffect(() => {\r\n        if(typeOfMainSection === MainSectionType.ProjectManager ){\r\n            dispatch(fetchAllProjects())\r\n        } if(typeOfMainSection === MainSectionType.Project){\r\n            dispatch(fetchData())\r\n        }\r\n    }, [typeOfMainSection])\r\n\r\n    if(user === null || projects === null) {\r\n        return(\r\n            <>\r\n            </>\r\n        )\r\n    }\r\n    const isAdmin = user[0].is_admin;\r\n    let superAdmin = false;\r\n    \r\n    if(user[0].hasOwnProperty('super_admin')){\r\n        console.log('super_admin');\r\n        superAdmin = user[0].super_admin;\r\n    }\r\n\r\n    let numberOfProjectOnTheOneLoad = 5;\r\n    let numberOfLoadedProjectsAtTheBeggining = 3;\r\n    let numberOfProjects = numberOfLoadedProjectsAtTheBeggining + numberOfProjectOnTheOneLoad * counterClickLoadMore;\r\n    const projectsDivide = projects.slice(0,numberOfProjects);\r\n\r\n    return(\r\n        <Wrapper typeTheme={typeTheme} >\r\n            {/* InnerUserNavbar - menu przesuwane pod profilem użytkownika */}\r\n            <InnerUserNavbar \r\n                typeFn={ (typeOfMainSection: React.SetStateAction<MainSectionType>) => setTypeOfMainSection(typeOfMainSection)}\r\n                valueOfType={typeOfMainSection} \r\n                isAdmin={isAdmin}\r\n                superAdmin={superAdmin}\r\n            />\r\n            {\r\n                typeOfMainSection === MainSectionType.Project && ( \r\n                    <WrapperProjectCard>\r\n                    {   projects.map( (project: any) =>   \r\n                            <ProjectCard  \r\n                                titleProject={project.name} \r\n                                description={project.content} \r\n                                departments={project.departments} \r\n                                projectId={project._id}\r\n                                projectTasks={tasks.filter(task => task.projectId === project._id )}\r\n                            />\r\n                            \r\n                        )\r\n                    }\r\n                    </WrapperProjectCard>\r\n                ) \r\n            }\r\n            {\r\n                typeOfMainSection === MainSectionType.Archives && (\r\n                    <WrapperProjectCard>\r\n                        <SubHeading>Brak projektów w archiwum</SubHeading>\r\n                    </WrapperProjectCard>\r\n                )\r\n            }\r\n            {\r\n                typeOfMainSection === MainSectionType.Tasks && (\r\n                    <WrapperProjectCard>\r\n                       <TasksSection />\r\n                    </WrapperProjectCard>\r\n                )\r\n            }\r\n            {\r\n                (isAdmin || superAdmin) && ( typeOfMainSection === MainSectionType.ProjectManager) && (\r\n                    <WrapperProjectCard>\r\n                        <BtnCreateProject onClick={() => history.push({\r\n                            pathname: '/homepage/project/create',\r\n                            state: {\r\n                                isEdited: false,\r\n                            }\r\n                        })}>Dodaj nowy projekt</BtnCreateProject>\r\n                        {\r\n                            projectsDivide.map((item : any) => (\r\n                                <ArchivesCard \r\n                                    admin={isAdmin} \r\n                                    key={item._id} \r\n                                    name={item.name} \r\n                                    description={item.content} \r\n                                    id={item._id} \r\n                                    customer={item.customer}\r\n                                    projectUsers={item.projectUsers} \r\n                                    hours={item.hours}\r\n                                    projectValue={item.projectValue}\r\n                                    deadline={item.deadline}\r\n                                    content={item.content}\r\n                                    departments={item.departments}\r\n                                    scopeOfWork={item.scopeOfWork}\r\n                                    assumptions={item.assumptions}\r\n                                    customerInfo={item.customerInfo}\r\n                                    />\r\n                            ))\r\n                        }\r\n                        <BtnLoadMore onClick={() => setCounterClickLoadMore(prev => prev + 1)} > Załaduj więcej </BtnLoadMore>\r\n                    </WrapperProjectCard>\r\n                )\r\n            }\r\n            {\r\n                superAdmin && (typeOfMainSection === MainSectionType.Data) && (\r\n                    <RatesSection />\r\n                )\r\n            }\r\n            <WrapperHelpdeskInfo>\r\n                <SubHeadingHelpdesk typeTheme={typeTheme}>Masz problem z obsługą planera?</SubHeadingHelpdesk>\r\n                <ParagraphHelpdesk typeTheme={typeTheme}> <SpanHelpdesk>Zgłoś się</SpanHelpdesk> do naszego helpdesku</ParagraphHelpdesk>\r\n            </WrapperHelpdeskInfo>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default MainSection;",["355","356"],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\LoginSection.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\RegisterSection.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\ArchivesCard\\ArchivesCard.tsx",["357"],"import styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport arrayBackIcon from '../../assets/arrayBack.svg';\r\nimport { SubHeading } from '../../components/Heading/Heading';\r\nimport { Paragraph } from '../../components/Paragraph/Paragraph';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getDetailsProject } from '../../store/Projects/actions';\r\nimport { useContext } from 'react';\r\nimport { ThemeContext, ThemeType } from '../../context/theme';\r\n\r\nconst Wrapper = styled.div<{ readonly typeTheme: string }>`\r\n    position: relative;\r\n    width: 315px;\r\n    min-height: 100px;\r\n    padding: 13px 42px;\r\n    margin: 0 auto;\r\n    box-shadow: 0px 2px 8px 2px rgba(0, 0, 0, 0.16);\r\n    border-radius: 10px;\r\n    margin-bottom: 25px;\r\n    background-color:  ${props => props.typeTheme === ThemeType.Light ? '#FFF' : '#F8FAFE'};\r\n`;\r\n\r\nconst ArrayBackIcon = styled.img`\r\n    position: absolute;\r\n    top: 10%;\r\n    right: 5%;\r\n`;\r\n\r\nconst ArchivesHeading = styled(SubHeading)`\r\n    text-align: left;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nconst WrapperLinkInCard = styled.div`\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin-top: 20px;\r\n`;\r\n\r\nconst LinkInCard = styled(Paragraph)`\r\n    color: #372FFF;\r\n    font-weight: 600;\r\n    cursor: pointer;\r\n`;\r\n\r\ninterface Props {\r\n    admin: boolean,\r\n    name: string,\r\n    description: string,\r\n    id: string ,\r\n    projectUsers: Array<number>,\r\n    customer: string,\r\n    hours: number | string, \r\n    projectValue: number | string,\r\n    deadline: Date,\r\n    content: string,\r\n    departments: Array<String>,\r\n    scopeOfWork: string, \r\n    assumptions: string,\r\n    customerInfo: string,\r\n}\r\n\r\nconst ArchivesCard = ({ admin, name, description, id, projectUsers, customer, hours, projectValue, departments, deadline, content, assumptions, scopeOfWork, customerInfo } : Props) => {\r\n    \r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { typeTheme, ThemeType } = useContext(ThemeContext);\r\n\r\n    const handleDetailsProjectClick = () => {\r\n        dispatch(getDetailsProject(name));\r\n        history.push({\r\n            pathname: `/homepage/project/${name}`,\r\n            state: {\r\n                id,\r\n                name,\r\n            }\r\n        })\r\n    }\r\n\r\n    return(\r\n        <Wrapper typeTheme={typeTheme}>\r\n            <ArchivesHeading>{name}</ArchivesHeading>\r\n            <Paragraph> {description} </Paragraph>\r\n            {\r\n               !admin && <ArrayBackIcon src={arrayBackIcon} alt=\"ikonka powrotu do poprzedniej strony\" />\r\n            }\r\n            {\r\n                admin && (\r\n                    <WrapperLinkInCard>\r\n                        <LinkInCard onClick={() => history.push({\r\n                            pathname: `/homepage/project/edit/${name}`,\r\n                            state: {\r\n                                isEdited: true,\r\n                                name,\r\n                                customer,\r\n                                hours,\r\n                                description,\r\n                                projectValue,\r\n                                projectUsers,\r\n                                departments,\r\n                                deadline,\r\n                                id,\r\n                                content,\r\n                                assumptions,\r\n                                scopeOfWork,\r\n                                customerInfo\r\n                            }\r\n                        })}>Edytuj</LinkInCard>\r\n                        <LinkInCard onClick={() => history.push({\r\n                            pathname: '/homepage/project/tasks',\r\n                            state: {\r\n                                id,\r\n                                projectUsers,\r\n                                name,\r\n                            }\r\n                        })}>Przydziel zadania</LinkInCard>\r\n                        <LinkInCard onClick={() => handleDetailsProjectClick()}>Szczegóły</LinkInCard>\r\n                    </WrapperLinkInCard>\r\n                )\r\n            }\r\n        </Wrapper>\r\n    )\r\n} \r\n\r\nexport default ArchivesCard;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\Form\\RegisterForm.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\Label\\Label.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\TaskCard\\TaskCard.tsx",["358","359","360"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateTask } from '../../store/Tasks/actions';\r\nimport { SubSubHeading } from '../../components/Heading/Heading';\r\nimport { Paragraph } from '../../components/Paragraph/Paragraph';\r\nimport { ThemeContext, ThemeType } from '../../context/theme';\r\nimport { SliderTask } from '../SliderTheme/SliderTheme';\r\n\r\nconst Wrapper = styled.div<{ readonly typeTheme: string; readonly isFinish: boolean }>`\r\n    width: 315px;\r\n    min-height: 100px;\r\n    padding: 15px 20px;\r\n    margin: 0 auto;\r\n    box-shadow: 0px 2px 8px 2px rgba(0, 0, 0, 0.16);\r\n    border-radius: 10px;\r\n    margin-bottom: 25px;\r\n    background-color: ${props => props.typeTheme === ThemeType.Light ? '#FFF' : '#F8FAFE'};\r\n    \r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n`;\r\n\r\nconst HeaderTaskCard = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-between;\r\n    margin-bottom: 12px;\r\n`;\r\n\r\nconst MiddlePart = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`;\r\n\r\nconst CloseTaskParagraph = styled(Paragraph)<{ onClick: any }>`\r\n    cursor: pointer;\r\n    font-weight: 500;\r\n\r\n    :hover{\r\n        color: #0903B0;\r\n    }\r\n`;\r\n\r\nconst WrapperLoadingBar = styled.div`\r\n    width: 275px;\r\n    height: 2px;\r\n    background-color: rgb(112,112,112, 0.4);\r\n    margin: 12px 0 5px 0;\r\n`;\r\n\r\nconst LoadingBar = styled.div<{ readonly percent: string, readonly activeTask: boolean}>`\r\n    height: 2px;\r\n    background-color: ${({ activeTask }) => activeTask ? 'green' : '#707070' };\r\n    position: relative;\r\n    width: ${props => props.percent};\r\n`;\r\n\r\nconst WrapperTimeTask = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-between;\r\n\r\n`;\r\n\r\ninterface Props {\r\n    division: Array<string>;\r\n    title: string;\r\n    time: number;\r\n    id: string;\r\n    taskTime: number;\r\n    isFinish: boolean;\r\n}\r\n\r\nconst initialTimeObject = {\r\n    hours: '00',\r\n    minutes: '00',\r\n    seconds: '00',\r\n}\r\n\r\nconst TaskCard = ({ division, title, time, id, taskTime, isFinish } :Props) => {\r\n    // time - czas całego zadania [min]\r\n    // taskTime - aktualny czas wykonywanego zadania \r\n    const [activeTask, setActiveTask] = useState(false);\r\n    const [ currentlyTaskTime, setCurrentlyTaskTime ] = useState(initialTimeObject);\r\n    const [ timeForAllTask, setTimeForAllTask ] = useState(initialTimeObject);\r\n    const [ update, setUpdate ] = useState(false); //zmienna ma rejestrować zmianę, która jest wysyłana do bazy danych\r\n    const [ percentCompleteOfTheTask, setPercentCompleteOfTheTask ] = useState(0);\r\n    const { typeTheme, ThemeType } = useContext(ThemeContext);\r\n    const dispatch = useDispatch();\r\n    \r\n    useEffect(() => {\r\n        setCurrentlyTaskTime(setTaskTime(taskTime));\r\n        setPercentCompleteOfTheTask( countingPercentCompleteOfTheTask(time, taskTime) )\r\n    }, [taskTime]);\r\n\r\n    useEffect(()=>{\r\n        setTimeForAllTask(setTaskTime(time));\r\n    }, []);\r\n\r\n    const handleClick = (): void => {\r\n        if(isFinish){\r\n            return;\r\n        }\r\n        setActiveTask(!activeTask);\r\n    }\r\n\r\n    const setTaskTime = (time : any) => {\r\n        const hours = Math.floor(time / 60);\r\n        const minutes = Math.floor(time % 60);\r\n        const seconds = Math.round(((time * 60) % 60));\r\n        \r\n\r\n        const stringHours = hours.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false}); // ustawiamy takie format 00:00:00\r\n        const stringMinutes = minutes.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\r\n        const stringSeconds = seconds.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\r\n       \r\n        return {\r\n            hours: stringHours,\r\n            minutes: stringMinutes,\r\n            seconds: stringSeconds,\r\n        }\r\n    }\r\n\r\n    const countingPercentCompleteOfTheTask = (allTime : number, currentlyTime: number) => {\r\n        let percent: number = ( (currentlyTime * 100) /  (allTime) );\r\n        if(percent > 100){\r\n            percent = 100;\r\n        }\r\n        return percent;\r\n    }\r\n\r\n    const handleUpdateTask = (e: React.SyntheticEvent): void => {\r\n        isFinish = !isFinish;\r\n        setUpdate(!update);\r\n        dispatch(updateTask(id, isFinish, taskTime));\r\n        \r\n    }\r\n\r\n    return(\r\n        <Wrapper typeTheme={typeTheme} isFinish={isFinish}>\r\n            <HeaderTaskCard>\r\n                <SubSubHeading >{division}</SubSubHeading>\r\n                <SliderTask activeTask={activeTask} idTask={id} taskTime={taskTime} isFinish={isFinish} activeHandle={() => handleClick()} />\r\n            </HeaderTaskCard>\r\n            <MiddlePart> \r\n                <Paragraph>{title}</Paragraph>\r\n                <CloseTaskParagraph onClick={(e: React.SyntheticEvent) => handleUpdateTask(e)}>\r\n                    { isFinish === true ? 'Przywróć' : 'Zakończ' }\r\n                </CloseTaskParagraph>\r\n            </MiddlePart>\r\n            <WrapperLoadingBar>\r\n                <LoadingBar activeTask={activeTask} percent={`${percentCompleteOfTheTask}%`}/>\r\n            </WrapperLoadingBar>\r\n            <WrapperTimeTask>\r\n                <Paragraph>{ `${currentlyTaskTime.hours}:${currentlyTaskTime.minutes}:${currentlyTaskTime.seconds} `}</Paragraph>\r\n                <Paragraph>{`${timeForAllTask.hours}:${timeForAllTask.minutes}:${timeForAllTask.seconds} `}</Paragraph>\r\n            </WrapperTimeTask>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default TaskCard;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\InnerUserNavbar\\InnerUserNavbar.tsx",["361"],"import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport leftArrow from '../../assets/leftArrayNavbar.svg';\r\nimport rightArrow from '../../assets/rightArrayNavbar.svg';\r\nimport { SubHeading } from '../../components/Heading/Heading';\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    width: 315px;\r\n    margin: 0 auto;\r\n`;\r\n\r\nconst ArrowRight = styled.img`\r\n    display: block;\r\n`;\r\n\r\nconst LeftArrow = styled.img`\r\n    display: block;\r\n`;\r\n\r\nconst WrapperNavbar = styled.div<{readonly shift: number}>`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    width: 283px;\r\n    margin: 0 auto;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst NavSubHeading = styled(SubHeading)<{ readonly active: boolean}>`\r\n    font-size: 12px;\r\n    color: #0903B0;\r\n\r\n    ${({ active }) => active && css`\r\n        color: white;\r\n    `}\r\n`;\r\n\r\nconst DivElemNavbar = styled.div<{ readonly active: boolean; readonly shift: number}>`\r\n    width: 90px;\r\n    min-width: 90px;\r\n    height: 43px;\r\n    box-shadow: 0px 1px 2px 1px rgba(0,0,0,0.10);\r\n    border-radius: 5px;\r\n    margin: 5px 5px 5px 0;\r\n    transform: translateX(calc( -95px * ${({ shift }) => shift} ));   \r\n    \r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    \r\n\r\n    ${({ active }) => active && \r\n        css`\r\n            background-color: #0903B0;\r\n            color: white;\r\n        `}\r\n`;\r\n\r\nenum MainSectionType {\r\n    Project = 'project',\r\n    Archives = 'archives',\r\n    ProjectManager = \"projectManager\",\r\n    Tasks = 'tasks'\r\n}\r\n\r\ninterface Props {\r\n    valueOfType: MainSectionType,\r\n    typeFn: Function,\r\n    isAdmin: boolean;\r\n}\r\n\r\n\r\nconst InnerUserNavbar = ({ typeFn, valueOfType, isAdmin }: Props) => {\r\n\r\n    // ustawienia dla arrows 0 - widzimy pierwszy kafelek - blokujemy możliwość dalszego przesuwania w prawo  [1][2][3]>\r\n    // ustawienia dla arrows 1 - widzimy ostatni kafelek  - blokujemy możliwość dalszego przesuwania w lewo  <[2][3][4]\r\n    const [arrowOptions, setArrowOptions] = useState(0);\r\n\r\n\r\n    // const isAdmin = true;\r\n    return(\r\n        <Wrapper>\r\n            { arrowOptions === 1 && isAdmin && <LeftArrow src={leftArrow} onClick={ () => setArrowOptions(0) } /> }\r\n            <WrapperNavbar shift={arrowOptions}>\r\n                <DivElemNavbar active={ valueOfType === MainSectionType.Project } onClick={() => typeFn(MainSectionType.Project)} shift={arrowOptions}>\r\n                    <NavSubHeading active ={ valueOfType === MainSectionType.Project} >Projekty</NavSubHeading>\r\n                </DivElemNavbar>\r\n                <DivElemNavbar active={ valueOfType === MainSectionType.Archives } onClick={() => typeFn(MainSectionType.Archives)} shift={arrowOptions}>\r\n                    <NavSubHeading active={ valueOfType === MainSectionType.Archives } >Archiwum projektów</NavSubHeading>\r\n                </DivElemNavbar>\r\n                {\r\n                    isAdmin && ( \r\n                        <DivElemNavbar active={ valueOfType === MainSectionType.ProjectManager } onClick={() => typeFn(MainSectionType.ProjectManager)} shift={arrowOptions}>\r\n                            <NavSubHeading active={ valueOfType === MainSectionType.ProjectManager }>Menedżer projektów</NavSubHeading> \r\n                        </DivElemNavbar> )\r\n                }\r\n                <DivElemNavbar active={ valueOfType === MainSectionType.Tasks } onClick={() => typeFn(MainSectionType.Tasks)} shift={arrowOptions}>\r\n                    <NavSubHeading active={ valueOfType === MainSectionType.Tasks } >Lista zadań</NavSubHeading>\r\n                </DivElemNavbar>\r\n            </WrapperNavbar>\r\n            { arrowOptions === 0 && isAdmin && <ArrowRight src={rightArrow} onClick={() => setArrowOptions(1)} /> }\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default InnerUserNavbar;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\interfaces\\Users\\Users.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\index.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\App.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Users\\reducer.ts",["362"],"import ActionsUsers from \"./actionCreator\";\r\nimport UsersConst from \"./constants\";\r\nimport { Users } from \"../../interfaces/Users/Users\";\r\n\r\n\r\nexport default (users: Array<Users> | [] = [], action: ActionsUsers) => {\r\n    switch(action.type){\r\n        case UsersConst.FETCH_ALL_USERS:\r\n            return action.payload;\r\n        case UsersConst.CREATE_USER:\r\n            return [...users, action.payload];\r\n        case UsersConst.LOGOUT_USER:\r\n            return users;\r\n        default:\r\n            return users;\r\n    }\r\n}","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Users\\authReducer.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Projects\\reducer.ts",["363"],"import Projects from '../../interfaces/Projects/Projects';\r\nimport ProjectsConst from './constans';\r\nimport ActionsProjects from './actionsCreator';\r\n\r\nexport interface ProjectsState {\r\n    projects: Array<Projects>,\r\n    detailsProjects: Projects | {},\r\n}\r\n\r\nconst initialState: ProjectsState = {\r\n    projects: [],\r\n    detailsProjects: {},\r\n}\r\n\r\nexport default (state: ProjectsState = initialState, action: ActionsProjects) => {\r\n    switch(action.type){\r\n        case ProjectsConst.FETCH_ALL_PROJECTS:\r\n            return {\r\n                ...state,\r\n                projects: action.payload,\r\n            }\r\n        case ProjectsConst.FETCH_DATA: \r\n            return {\r\n                ...state,\r\n                projects: action.payload.selectedProjects,\r\n            };\r\n        case ProjectsConst.CREATE_PROJECT:\r\n            return {\r\n                ...state,\r\n                projects: [...state.projects, action.payload],\r\n            }\r\n        case ProjectsConst.GET_DETAILS_PROJECT:\r\n            return {\r\n                ...state,\r\n                detailsProject: action.payload\r\n            };\r\n        case ProjectsConst.EDIT_PROJECT:\r\n            return {\r\n                ...state,\r\n                projects: [...state.projects].map(project => {\r\n                    if(project._id === action.payload.id){\r\n                        project = action.payload.data;\r\n                        project._id = action.payload.id;\r\n                        return project;\r\n                    }\r\n                    return project;\r\n                })\r\n            }\r\n        default:\r\n            return initialState;\r\n        }\r\n}","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Errors\\reducer.ts",["364"],"import ActionsErr from './actionsCreator';\r\nimport ErrorsConst from './constants';\r\n\r\nexport default (errors = [], action: ActionsErr) => {\r\n    switch(action.type){\r\n        case ErrorsConst.ERROR_LOGIN_USER:\r\n            return action.payload;\r\n        case ErrorsConst.ERROR_REGISTER_USER:\r\n            return action.payload;\r\n        case ErrorsConst.ERROR_CREATE_NEW_PROJECT:\r\n            return action.payload;\r\n        case ErrorsConst.ERROR_CREATE_NEW_TASK:\r\n            return action.payload;\r\n        case ErrorsConst.ERROR_EDIT_PROJECT:\r\n            return action.payload;\r\n        default:\r\n            return errors;\r\n    }\r\n}","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Tasks\\reducer.ts",["365"],"import ActionsTasks from \"./actionsCreator\";\r\nimport TasksConst from \"./constants\";\r\nimport { Task } from \"../../interfaces/Tasks/Tasks\";\r\n\r\nexport interface TasksState {\r\n    tasks: Array<Task>,\r\n    categoryTask: Array<string>,\r\n}\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n    categoryTask: [],\r\n}\r\n\r\nexport default (state: TasksState = initialState, action: ActionsTasks) => {\r\n    switch(action.type){\r\n        case TasksConst.SELECT_TYPE_OF_TASK:\r\n            return {\r\n                ...state,\r\n                categoryTask: checkFunction(action.payload.name, state.categoryTask),\r\n            }\r\n        case TasksConst.GET_EMPTY:\r\n            return {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks\r\n                ],\r\n                categoryTask: action.payload\r\n            };\r\n        case TasksConst.CREATE_NEW_TASK:\r\n            return {\r\n                tasks: [\r\n                    ...state.tasks,\r\n                    action.payload\r\n                ],\r\n                categoryTask: []\r\n            }   \r\n        case TasksConst.FETCH_DATA:\r\n            return {\r\n                tasks: action.payload.tasks,\r\n                categoryTask: [],\r\n            };   \r\n        case TasksConst.START_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks\r\n                ].map(task => {\r\n                    if(task._id === action.payload.id){\r\n                        task.isActive = true;\r\n                    }\r\n                    return task;\r\n                })\r\n            }\r\n            case TasksConst.STOP_TASK:\r\n                return {\r\n                    ...state,\r\n                    tasks: [\r\n                        ...state.tasks\r\n                    ].map(task => {\r\n                        if(task._id === action.payload.id){\r\n                            task.taskTime = task.taskTime + action.payload.time;\r\n                        }\r\n                        return task;\r\n                    })\r\n                } \r\n            case TasksConst.CLOSE_TASK:\r\n                return {\r\n                    ...state,\r\n                    tasks: [...state.tasks].map(task => {\r\n                        if(task._id === action.payload.id){\r\n                            task.isFinish = action.payload.isFinish;\r\n                            return task;\r\n                        }\r\n                        return task;\r\n                    })\r\n                }\r\n            case TasksConst.UPDATE_TASK:\r\n                return {\r\n                    ...state,\r\n                    tasks: [...state.tasks].map(task => {\r\n                        if(task._id === action.payload.id){\r\n                            task.taskTime = action.payload.addedTime + action.payload.taskTime;\r\n                            task.isFinish = action.payload.isFinish;\r\n                            return task;\r\n                        }\r\n                        return task;\r\n                    })\r\n                }\r\n        default:\r\n            return initialState;\r\n    }\r\n}\r\n\r\nconst checkFunction = (name: string, array: Array<string> ) => {\r\n    console.log(array);\r\n    let count = 0;\r\n    for(let i = 0; array.length > i; i++ ){\r\n        if(array.includes(name)){\r\n            count++;\r\n        }\r\n    }\r\n    if(count === 2){\r\n        const newArray = array.filter(item => item !== name);\r\n        return newArray;\r\n    } else if( count !== 2) {\r\n        array.push(name);\r\n        return array;\r\n    }\r\n}","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Departments\\reducer.ts",["366"],"import Departments from \"../../interfaces/Departments/Departments\";\r\nimport ActionsDepartments from \"./actionsCreator\";\r\nimport DepartmentsConsts from \"./constants\";\r\n\r\n\r\nexport default (departments: Array<Departments> | [] = [] , action: ActionsDepartments) => {\r\n    switch(action.type){\r\n        case DepartmentsConsts.FETCH_ALL_DEPARTMENTS:\r\n            return [...action.payload.data].map(item => {\r\n                item.active = false;\r\n                return item;\r\n            });\r\n        case DepartmentsConsts.ADD_ACTIVE:\r\n            return [...departments].map(item => {\r\n                if(item.name === action.payload.name){\r\n                    item.active = action.payload.status;                  \r\n                }\r\n                return item;\r\n                });;    \r\n            \r\n         case DepartmentsConsts.ADD_ACTIVE_FROM_EDIT:\r\n             return [...departments].map(item => {\r\n                    if(action.payload.names.includes(item.name)){\r\n                         item.active = true;\r\n                    }\r\n                    return item;\r\n                });       \r\n        default:\r\n            return departments;\r\n    }\r\n}","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Rates\\reducer.ts",["367"],"import Rates from \"../../interfaces/Rates/Rates\";\r\nimport ActionsRates from \"./actionsCreator\";\r\nimport RatesConst from \"./constants\";\r\n\r\n\r\nexport default (rates: Array<Rates> = [], action: ActionsRates) => {\r\n    switch(action.type){\r\n        case RatesConst.FETCH_ALL_RATES:\r\n            return action.payload;\r\n        case RatesConst.EDIT_RATE:\r\n            return [\r\n                ...rates, \r\n            ].map(rate => {\r\n                if(rate._id === action.payload.id){\r\n                    rate.rate = action.payload.value;\r\n                }\r\n                return rate\r\n            })\r\n        default:\r\n            return rates;\r\n        }\r\n}","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\theme\\mainTheme.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\theme\\GlobalStyle.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\UserPage.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\LogoutPage.tsx",["368"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../organisms/Header';\r\nimport LogoutSection from '../organisms/LogoutSection';\r\n\r\nconst LogoutPage = () => {\r\n    return(\r\n        <>\r\n            <Header />\r\n            <LogoutSection/>\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\nexport default LogoutPage;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\HomePage.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\RegisterPage.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\LogInPage.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\CreateProject.tsx",["369","370","371","372","373"],"import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport PersonToProject from '../molecules/PersonToProject/PersonToProject';\r\nimport Footer from '../organisms/Footer';\r\nimport Header from '../organisms/Header';\r\nimport TextArea from '../components/TextArea/TextArea';\r\nimport { Heading, SubHeading } from '../components/Heading/Heading';\r\nimport { LoginButton } from '../components/Button/Button';\r\nimport LabelSection from '../organisms/LabelSection';\r\nimport { Input } from '../components/Input/Input';\r\nimport { fetchAllUsers } from '../store/Users/actions';\r\nimport { addActiveDepartmentFromEdit  } from '../store/Departments/actions';\r\nimport { createProject, editProject, fetchAllProjects } from '../store/Projects/actions';\r\nimport ErrorMessage from '../molecules/ErrorMessage/ErrorMessage';\r\nimport { Users } from '../interfaces/Users/Users';\r\nimport Departments from '../interfaces/Departments/Departments';\r\nimport Projects from '../interfaces/Projects/Projects';\r\n\r\n\r\nconst CreateProjectFormDiv = styled.div`\r\n    max-width: 275px;\r\n    margin: 50px auto 0 auto;\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-top: 51px;\r\n`;\r\n\r\nconst AssignmentSection = styled.section`\r\n    max-width: 275px;\r\n    margin: 0 auto;\r\n`;\r\n\r\nconst MarksSection = styled.section`\r\n    max-width: 275px;\r\n    margin: 50px auto 0px auto;\r\n`;\r\n\r\nconst CreateBtn = styled(LoginButton)`\r\n    margin-bottom: 40px;\r\n`;\r\n\r\nconst CustomerTextArea = styled(TextArea)`\r\n    min-height: 100px;\r\n    width: 300px;\r\n    border-radius: 20px;\r\n    padding: 10px 10px 10px 15px;\r\n    margin: 10px auto;\r\n\r\n    ::placeholder{\r\n        padding-left: 25px;\r\n        color: rgb(55, 47, 255, 0.5);\r\n    }\r\n`;\r\n\r\ninterface ProjectData {\r\n    name: string,\r\n    customer: string,\r\n    deadline: string,\r\n    hours: number | string,\r\n    projectValue: string,\r\n    content: string,\r\n    assumptions: string,\r\n    scopeOfWork: string,\r\n    customerInfo: string,\r\n    projectUsers: Array<string>,\r\n    departments: Array<string>,\r\n    description: string,\r\n}\r\n\r\ninterface DefaultRootState {\r\n    users: Array<Users> | [],\r\n    departments: Array<Departments> | [],\r\n    errors: {\r\n        message: string,\r\n    }\r\n}\r\n\r\nconst initialProjectData: Projects = {\r\n    name: '',\r\n    customer: '',\r\n    deadline: '',\r\n    hours: '',\r\n    projectValue: '',\r\n    content: '',\r\n    assumptions: '',\r\n    scopeOfWork: '',\r\n    customerInfo: '',\r\n    projectUsers: [''],\r\n    departments: [''],\r\n    description: '',\r\n    id: '',\r\n}\r\n\r\n\r\nconst CreateProject = (props : any) => {\r\n    \r\n    const [projectData, setProjectData] = useState<Projects>(initialProjectData);\r\n    const [department, setDepartemnt] = useState<Array<Departments> | []>([]);\r\n    const [users, setUsers] = useState<Array<Users> | []>([]);\r\n    const [ status, setStatus] = useState(false);\r\n    const [ idUsersAssignToProject, setIdUsersAssignToProject] = useState<Array<string>>([]); //id użytkowników przypisanych (klikniętych) do wykonania projektu\r\n    const [ changeDetektor, setChangeDetektor] = useState(false);\r\n    \r\n    // flagi dzięki którym dane z edytowanego projektu będą uruchamiane w useEffect tylko raz, po pierwszym uruchomieniu damy false\r\n    const [ isEditedDataUpdate, setIsEditedDataUpdate ] = useState(true); \r\n    const [ isEditedIdAssign, setIsEditedIdAssign ] = useState(true);\r\n    \r\n    const dispatch = useDispatch();\r\n    const fetchUsers = useSelector((state : DefaultRootState) => state.users);\r\n    const fetchDepartments = useSelector((state :DefaultRootState) => state.departments);\r\n    const errorMessage = useSelector((state :DefaultRootState) => state.errors.message);\r\n    const history = useHistory();\r\n    const { isEdited, name, customer, hours, projectValue, deadline, content, projectUsers, departments, id, scopeOfWork, assumptions, customerInfo } = props.location.state;\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchAllUsers());\r\n        setUsers(fetchUsers);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n       setDepartemnt(fetchDepartments);\r\n       if(isEdited && isEditedDataUpdate){\r\n            dispatch(addActiveDepartmentFromEdit(departments)); \r\n            dispatch(fetchAllProjects());\r\n            setIsEditedDataUpdate(false);\r\n            setProjectData({\r\n                ...projectData,\r\n                name: name,\r\n                customer: customer,\r\n                deadline: deadline,\r\n                hours: hours,\r\n                projectValue: projectValue,\r\n                content: content, \r\n                projectUsers: projectUsers,\r\n                departments: departments,\r\n                scopeOfWork: scopeOfWork,\r\n                assumptions: assumptions,\r\n                customerInfo: customerInfo,\r\n            })\r\n            return\r\n       }\r\n       setProjectData({\r\n        ...projectData,\r\n        departments: [...nameActiveDepartments]\r\n    })\r\n    }, [status])    \r\n\r\n    useEffect(()=>{\r\n        if(isEdited && isEditedIdAssign){\r\n            setIdUsersAssignToProject(projectUsers);\r\n            setIsEditedIdAssign(false);\r\n            return;\r\n        }\r\n        setIdUsersAssignToProject(idUsersAssignToProject);\r\n    }, [changeDetektor])\r\n\r\n    //activeDepartments - nazwy działów które zostały wybrane do realizacji projektu\r\n    let activeDepartments = department.filter(item => item.active);\r\n    let nameActiveDepartments = activeDepartments.map(item => item.name);\r\n    console.log(nameActiveDepartments);\r\n\r\n    const assignUsersToSelectedDepartment = (user: Users) => {\r\n        let amountConditions = nameActiveDepartments.length;\r\n        let i = 0;\r\n        while(i < amountConditions){\r\n            if(user.department === nameActiveDepartments[i]){\r\n                return user\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n\r\n    //userzy z działów, które zostały wybrane\r\n    const usersFromSelectedDepartments = fetchUsers.filter(assignUsersToSelectedDepartment);  \r\n\r\n    const handleChange = (e :React.SyntheticEvent) => {\r\n        const target = e.target as HTMLTextAreaElement ;\r\n\r\n        if(isEdited && isEditedDataUpdate){\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        const name = target.name;\r\n        setProjectData({\r\n            ...projectData,\r\n            [name]:target.value\r\n        });\r\n    }\r\n\r\n    // let projectUsers = [];\r\n    // funkcja usuwająca użytkownika z tablicy, gdy admin kliknie drugi raz (czyli odkliknie udział użytkownika w projekcie)\r\n    const handleAssignIdUserToProject = (id :string , department :string) => {\r\n        \r\n        // sprawdzamy czy jakiś użytkownik nie został wcześniej do projektu przypisany\r\n        if(typeof idUsersAssignToProject !== \"undefined\" && idUsersAssignToProject.length > 0){\r\n            // jeśli ktoś już jest to sprawdzamy czy czasami przed chwilą kliknięty pracownik, to nie jest ten, który został już wcześniej przypisany do tego projektu\r\n            // mówiąc prościej czy pracownik nie został klinięty drugi raz -> czyli odklinięty\r\n            const foundExistingId = idUsersAssignToProject.includes(id);\r\n            \r\n            if(foundExistingId){\r\n                // jeśli istnieje, to musimy go usunąć z tablicy\r\n                const filteredArray = idUsersAssignToProject.filter(item => item !== id );\r\n        \r\n                setProjectData({\r\n                    ...projectData,\r\n                    projectUsers: filteredArray\r\n                })\r\n                return setIdUsersAssignToProject(filteredArray) // zwracamy tablicę bez usuniętego id              \r\n                \r\n            }\r\n        }\r\n\r\n        // sprawdzamy czy dział ostanio używanego u\r\n        const filteredActiveDepartment = nameActiveDepartments.includes(department);\r\n        if(filteredActiveDepartment){\r\n            setIdUsersAssignToProject([\r\n                ...idUsersAssignToProject,\r\n                id\r\n            ])\r\n            \r\n            setProjectData({\r\n                ...projectData,\r\n                projectUsers: [\r\n                    ...idUsersAssignToProject,\r\n                    id\r\n                ]\r\n            })\r\n        } \r\n        setChangeDetektor(!changeDetektor);\r\n        \r\n    }\r\n\r\n    const handleSubmit = (e :React.SyntheticEvent) => {\r\n        try {\r\n            e.preventDefault();\r\n            if(isEdited){\r\n                console.log(projectData);\r\n                dispatch(editProject(projectData, name, id, history));\r\n                return;\r\n            }\r\n            \r\n            dispatch(createProject(projectData, history));\r\n            console.log(projectData);\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    \r\n    }\r\n\r\n    return(\r\n       <>\r\n            <Header />\r\n            <CreateProjectFormDiv>\r\n                <Heading>\r\n                    {\r\n                        isEdited ? ( name ) : (\"Nowy projekt\")     \r\n                    }    \r\n                </Heading>\r\n                <Form id=\"project-form\" onSubmit={(e) => handleSubmit(e)}>\r\n                    <Input placeholder=\"Nazwa projektu\" type=\"string\" name=\"name\" onChange={ (e) => handleChange(e) } value={projectData.name} />\r\n                    <Input placeholder=\"Klient\" type=\"string\" name=\"customer\" onChange={ (e) => handleChange(e)} value={projectData.customer} />\r\n                    <CustomerTextArea placeholder=\"Krótki opis klienta\" name=\"customerInfo\" onChange={(e) => handleChange(e)} value={projectData.customerInfo} />\r\n                    <Input placeholder=\"Termin oddania projektu\" type=\"date\" name=\"deadline\" onChange={ (e) => handleChange(e) } value={projectData.deadline} />\r\n                    <Input placeholder=\"Ilość godzin na projekt\" type=\"number\" name=\"hours\" onChange={ (e) => handleChange(e) } value={projectData.hours} />\r\n                    <Input placeholder=\"Wartość projektu w PLN\" type=\"number\" name=\"projectValue\" onChange={ (e) => handleChange(e) } value={projectData.projectValue} />\r\n                \r\n                    <SubHeading>Opisz założenia projektowe</SubHeading>\r\n                    <TextArea placeholder=\"Treść wiadomości\" name=\"assumptions\" onChange={(e) => handleChange(e)} value={projectData.assumptions} />\r\n                    <SubHeading>Opisz zakres pracy <br /> w ramach projektu</SubHeading>\r\n                    <TextArea placeholder=\"Treść wiadomości\" name=\"scopeOfWork\" onChange={(e) => handleChange(e)} value={projectData.scopeOfWork} />\r\n                </Form>\r\n            </CreateProjectFormDiv>\r\n            {/* changeStatus - funkcja sprawdzająca czy został kliknięty jakikolwiek Label - efektem jest zmiana statusu boolean na przeciwny, co powoduje przerenderowanie komponentu\r\n            w celu pobrania zaktualizowanych statusów department */}\r\n            <LabelSection title=\"Wybierz dział odpowiedzialny za projekt\" category=\"department\" changeStatus={() => setStatus(!status)} />\r\n            <AssignmentSection>\r\n                <SubHeading>Przypisz osoby <br /> pracujące przy projekcie</SubHeading>\r\n                {\r\n                    usersFromSelectedDepartments.map(user => {\r\n                        return(\r\n                            <PersonToProject\r\n                                key={user._id}\r\n                                id={user._id}\r\n                                position={user.position} \r\n                                name={user.name}\r\n                                surname={user.surname} \r\n                                department={user.department}\r\n                                assignUserToProject={ () => handleAssignIdUserToProject(user._id, user.department)}\r\n                                assignUsersFromEditProject={projectUsers}\r\n                                isFromEdition={isEdited}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </AssignmentSection>\r\n            <MarksSection>\r\n                <SubHeading>Przekaż wytyczne<br /> dotyczące projektu</SubHeading>\r\n                <TextArea placeholder=\"Treść wiadomości\" form=\"project-form\" name=\"content\" onChange={(e) => handleChange(e)} value={projectData.content} />\r\n            </MarksSection>\r\n            { errorMessage && <ErrorMessage error={errorMessage} /> }\r\n            <CreateBtn form=\"project-form\">{ isEdited ? ('Edytuj') : ('Utwórz projekt') }</CreateBtn>\r\n\r\n            <Footer />\r\n       </>\r\n    )\r\n}\r\n\r\nexport default CreateProject;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\DetailsProject.tsx",["374","375","376"],"import { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Footer from '../organisms/Footer';\r\nimport Header from '../organisms/Header';\r\nimport ProfabilityProjectSection from '../organisms/ProfitabilityProjectSection';\r\nimport timeIcon from '../assets/timeProject.svg';\r\nimport { Heading, SubHeading } from '../components/Heading/Heading';\r\nimport { Paragraph } from '../components/Paragraph/Paragraph';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getDetailsProject } from '../store/Projects/actions';\r\nimport LoadingWrapper from '../molecules/LoadingWrapper/LoadingWrapper';\r\nimport Projects from '../interfaces/Projects/Projects';\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 100px 36px 0 36px;\r\n\r\n    @media(min-width: 600px ) {\r\n        max-width: 600px;\r\n        margin: 100px auto 0 auto;\r\n    }\r\n\r\n    @media(min-width: 1366px ) {\r\n        max-width: 800px;\r\n        margin: 100px auto 0 auto;\r\n    }\r\n\r\n`;\r\n\r\nconst DetailsSubHeading = styled(SubHeading)`\r\n    margin: 50px 0;\r\n\r\n    @media(min-width: 600px){\r\n        margin: 50px 0;\r\n    }\r\n`;\r\n\r\nconst TimeProjectHeading = styled(SubHeading)`\r\n    margin-bottom: 67px;\r\n    margin-top: 50px;\r\n`;\r\n\r\nconst TimeProjectWrapper = styled.div`\r\n    margin: 0 auto 80px auto;\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    align-items: center;\r\n`;\r\n\r\nconst LeftSide = styled.div`\r\n    width: 35px;\r\n    height: 35px;\r\n    box-shadow: 0px 2px 8px 2px rgba(0, 0, 0, 0.16);\r\n    border-radius: 5px;\r\n    background-image: url(${timeIcon});\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    \r\n`;\r\n\r\nconst MiddleSide = styled.div`\r\n    flex-grow: 3;\r\n    margin-left: 30px;\r\n`;\r\n\r\nconst RightSide = styled.div`\r\n\r\n`;\r\n\r\nconst DetailsParagraph = styled(Paragraph)`\r\n    margin: 30px auto;\r\n`;\r\n\r\nconst TitleParagraph = styled(Paragraph)`\r\n    font-weight: 800;\r\n`;\r\n\r\nconst SubtitleParagraph = styled(Paragraph)`\r\n    color: #A5A5A5;\r\n`;\r\n\r\ninterface DefaultRootState {\r\n    projects: {\r\n        detailsProject: Projects,\r\n    }\r\n}\r\n\r\n\r\nconst DetailsProject = (props :any) => {\r\n\r\n    // const { name } = props.location.state; // nazwa projektu\r\n    const detailsProject = useSelector((state :DefaultRootState) => state.projects.detailsProject); \r\n    // const dispatch = useDispatch();\r\n    console.log(detailsProject);\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(getDetailsProject(name));\r\n    // }, []);\r\n\r\n    if(detailsProject === null || detailsProject === undefined || Object.keys(detailsProject).length === 0 ){\r\n        return(\r\n            <LoadingWrapper/>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Header/>\r\n        <Wrapper>\r\n            <Heading>{detailsProject.name}</Heading>\r\n            <DetailsSubHeading>Specyfikacja projektowa</DetailsSubHeading>\r\n            <DetailsParagraph>\r\n                {detailsProject.assumptions} <br/>\r\n                {detailsProject.content}\r\n            </DetailsParagraph>\r\n            <DetailsSubHeading>{detailsProject.customer}</DetailsSubHeading>\r\n            <DetailsParagraph>{detailsProject.customerInfo}</DetailsParagraph>\r\n            <TimeProjectHeading>Czas pracy nad projektem</TimeProjectHeading>\r\n            <TimeProjectWrapper>\r\n                <LeftSide/>\r\n                <MiddleSide>\r\n                    <TitleParagraph>Realizacja</TitleParagraph>\r\n                    <SubtitleParagraph>W realizacji</SubtitleParagraph>\r\n                </MiddleSide>\r\n                <RightSide>\r\n                    {detailsProject.hours}H\r\n                </RightSide>\r\n            </TimeProjectWrapper>\r\n            <DetailsSubHeading>Zakres pracy <br/> w ramach projektu</DetailsSubHeading>\r\n            <DetailsParagraph>{detailsProject.scopeOfWork}</DetailsParagraph>\r\n            <DetailsSubHeading>Rentowność projektu</DetailsSubHeading>\r\n            <ProfabilityProjectSection projectValue={Number(detailsProject.projectValue)} hours={Number(detailsProject.hours)} />\r\n        </Wrapper>\r\n        <Footer/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailsProject;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\TasksToProject.tsx",["377","378","379","380"],"import React, { useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport Footer from '../organisms/Footer';\r\nimport Header from '../organisms/Header';\r\nimport PersonToProject from '../molecules/PersonToProject/PersonToProject';\r\nimport LabelSection from '../organisms/LabelSection';\r\nimport TextArea from '../components/TextArea/TextArea';\r\nimport acceptingIcon from '../assets/accept.svg';\r\nimport ErrorMessage from '../molecules/ErrorMessage/ErrorMessage';\r\nimport Projects from '../interfaces/Projects/Projects';\r\nimport { Users } from '../interfaces/Users/Users';\r\nimport { Heading, SubHeading } from '../components/Heading/Heading';\r\nimport { LoginButton } from '../components/Button/Button';\r\nimport { Paragraph } from '../components/Paragraph/Paragraph';\r\nimport { Input } from '../components/Input/Input';\r\nimport { createNewTask, getEmpty } from '../store/Tasks/actions';\r\nimport { addTaskToProject } from '../store/Projects/actions';\r\nimport { InitialTaskData, Task } from '../interfaces/Tasks/Tasks';\r\n\r\n\r\nconst AssignmentSection = styled.section`\r\n    max-width: 275px;\r\n    margin: 0 auto;\r\n`;\r\n\r\nconst FormSection = styled.section`\r\n    max-width: 275px;\r\n    margin: 50px auto 0px auto;\r\n`;\r\n\r\nconst ConfirmDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    margin: 0 auto;\r\n    max-width: 275px;\r\n`;\r\n\r\nconst ConfirmBtn = styled(LoginButton)`\r\n    margin: 40px auto;\r\n`;\r\n\r\nconst ConfirmBox = styled.div<{readonly userSelect :boolean, readonly icon :string}>`\r\n    border: 1px solid #D1D1D1;\r\n    width: 41px;\r\n    height: 41px;\r\n    background-color: #D1D1D1;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    background-image: none;\r\n\r\n    ${({ userSelect }) => userSelect && css<{ readonly icon :string}>`\r\n        background-image: url(${({ icon }) => icon });\r\n        background-position: center;\r\n        background-repeat: no-repeat;\r\n        background-color: #00BD51;\r\n    `}\r\n`;\r\n\r\nconst ParagraphBox = styled(Paragraph)`\r\n    width: 70%;\r\n`;\r\n\r\nconst ParagraphNote = styled(Paragraph)`\r\n    color: #0903B0;\r\n    text-align: center;\r\n`;\r\n\r\nconst SpanNote = styled.span`\r\n    font-weight: 700;\r\n`;\r\n\r\nconst SubHeadingForm = styled(SubHeading)`\r\n    margin: 30px auto;\r\n`;\r\n\r\nconst initialTaskData: InitialTaskData = {\r\n    title: '',\r\n    brief: '',\r\n    time: 0,\r\n    guidelines: '',\r\n    categoryTask: [''],\r\n    projectId: '',\r\n    projectName: '',\r\n    halfTimeReport: false,\r\n    taskUsers: [''],\r\n    isFinish: false,\r\n    taskTime: 0,\r\n    weight: 0,\r\n    id: '',\r\n    _id: '',\r\n}\r\n\r\n\r\ninterface DefaultRootState {\r\n    users: Array<Users>,\r\n    tasks: {\r\n        categoryTask: string[],\r\n    },\r\n    errors: {\r\n        message: string,\r\n    }\r\n}\r\n\r\ninterface Props {\r\n    location: {\r\n        state: Projects\r\n    }\r\n}\r\n\r\nconst TasksToProject = (props :Props) => {\r\n\r\n    const [taskData, setTaskData] = useState(initialTaskData);\r\n    const [isAccept, setIsAccept] = useState(false);\r\n    const [halfTimeReport, setHalfTimeRaport] = useState(false);\r\n    const [idUserAssign, setIdUserAssign] = useState<Array<string>>([]); \r\n    const [changeDetektor, setChangeDetektor] = useState(false);\r\n    const [status, setStatus] = useState(false);\r\n    const users = useSelector((state:DefaultRootState) => state.users);\r\n    const categoryTask = useSelector((state:DefaultRootState) => state.tasks.categoryTask);\r\n    const errorMessage = useSelector((state:DefaultRootState) => state.errors.message);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const { id, projectUsers, name }:Projects = props.location.state;\r\n\r\n    useEffect(() => {\r\n        setIdUserAssign(idUserAssign);\r\n        dispatch(getEmpty());\r\n    }, [changeDetektor]);\r\n\r\n    useEffect(()=> {\r\n        setTaskData({\r\n            ...taskData,\r\n            categoryTask,\r\n            projectId: id,\r\n            projectName: name,\r\n        })\r\n    }, [status])\r\n\r\n    useEffect(()=>{\r\n        setTaskData({\r\n            ...taskData,\r\n            halfTimeReport\r\n        })\r\n    },[isAccept])\r\n\r\n    const handleAssignIdUserToProject = (id :string, department :string) => {\r\n         // sprawdzamy czy jakiś użytkownik nie został wcześniej do zadania przypisany\r\n         if(typeof idUserAssign !== \"undefined\" && idUserAssign.length > 0){\r\n            // jeśli ktoś już jest to sprawdzamy czy czasami przed chwilą kliknięty pracownik, to nie jest ten, który został już wcześniej przypisany do tego projektu\r\n            // mówiąc prościej czy pracownik nie został klinięty drugi raz -> czyli odklinięty\r\n            const foundExistingId = idUserAssign.includes(id);\r\n            \r\n            if(foundExistingId){\r\n                // jeśli istnieje, to musimy go usunąć z tablicy\r\n                const filteredArray = idUserAssign.filter(item => item !== id );\r\n        \r\n                setTaskData({\r\n                    ...taskData,\r\n                    taskUsers: filteredArray\r\n                })\r\n                return setIdUserAssign(filteredArray) //zwracamy tablicę bez usuniętego id              \r\n                \r\n            }\r\n        }\r\n        setIdUserAssign([\r\n            ...idUserAssign,\r\n            id\r\n        ])\r\n        setTaskData({\r\n            ...taskData,\r\n            taskUsers: [...idUserAssign, id]\r\n        })\r\n\r\n        setChangeDetektor(!changeDetektor);\r\n    }\r\n\r\n    const handleChange = (e :React.SyntheticEvent) => {\r\n        e.preventDefault();\r\n        const target = e.target as HTMLTextAreaElement ;\r\n        setTaskData({\r\n            ...taskData,\r\n            [target.name]: target.value,\r\n        })\r\n        \r\n    }\r\n\r\n    const handleClickBox = (e :React.SyntheticEvent) => {\r\n        e.preventDefault();\r\n        setHalfTimeRaport(prev => !prev);\r\n        setIsAccept(prev => !prev);\r\n        setTaskData({\r\n            ...taskData,\r\n            halfTimeReport,\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e :React.SyntheticEvent) => {\r\n        try { \r\n            e.preventDefault();\r\n            dispatch(createNewTask(taskData, history));\r\n            dispatch(addTaskToProject(id, taskData));\r\n            console.log(taskData);\r\n        } catch (error) {\r\n            console.log(error); \r\n        }\r\n    }\r\n    // potrzebujemy wiedzieć kto jest przypisany do projektu - tylko tym osobom możemy przypisać zadanie w ramach projektu\r\n    // id projektu, id osób w projekcie \r\n\r\n    const usersInProject = users.filter(user => projectUsers.includes(user._id));\r\n\r\n    return(\r\n        <>\r\n            <Header/>\r\n            <Heading> {name} </Heading>\r\n            <AssignmentSection>\r\n                <SubHeading>Przydziel zadania do projektu</SubHeading>\r\n                {\r\n                    usersInProject.map(user => (\r\n                        <PersonToProject \r\n                            key={user._id}\r\n                            id={user._id}\r\n                            name={user.name}\r\n                            surname={user.surname}\r\n                            position={user.position}\r\n                            department={user.department}\r\n                            assignUserToProject={ () => handleAssignIdUserToProject(user._id, user.department)}\r\n                            assignUsersFromEditProject={[]}\r\n                        />\r\n                    ))\r\n                }\r\n            </AssignmentSection>\r\n            <LabelSection title=\"Wybierz kategorię zadania\" category=\"tasks\" changeStatus={() => setStatus(!status)} />\r\n            <FormSection>\r\n                <form id=\"task-form\" onSubmit={(e) => handleSubmit(e)}>\r\n                    <Input placeholder=\"Nazwa zadania\" type=\"string\" name=\"title\" value={taskData.title} onChange={(e) => handleChange(e)} />\r\n                    <Input placeholder=\"Skrócony opis zadania\" type=\"string\" name=\"brief\" value={taskData.brief} onChange={(e) => handleChange(e)} />\r\n                    <Input placeholder=\"Podaj czas pracy w minutach\" type=\"number\" name=\"time\" value={taskData.time} onChange={(e) => handleChange(e)} />\r\n                    <ParagraphNote><SpanNote>Uwaga!</SpanNote> W ramach tego projektu <br/>zostało do zagospodarowania <SpanNote>47 godzin</SpanNote></ParagraphNote>\r\n                    <SubHeadingForm>Opisz zakres pracy<br /> w ramach zadania</SubHeadingForm>\r\n                    <TextArea placeholder=\"Treść wiadomości\" name=\"guidelines\" value={taskData.guidelines} onChange={(e) => handleChange(e)} />\r\n                    <ConfirmDiv>\r\n                        <ConfirmBox icon={acceptingIcon} onClick={(e) => handleClickBox(e)} userSelect={isAccept} />\r\n                        <ParagraphBox >Poproś o raport z postępu prac po upływie 50% czasu.</ParagraphBox>\r\n                    </ConfirmDiv>\r\n                    {errorMessage && <ErrorMessage error={errorMessage} />}\r\n                    <ConfirmBtn form=\"task-form\">Zatwierdź zadanie</ConfirmBtn>\r\n                </form>\r\n            </FormSection>\r\n\r\n            <Footer/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksToProject;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\util\\domain.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Users\\constants.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Errors\\constants.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Projects\\constans.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Tasks\\constants.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Rates\\constants.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Departments\\actions.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Projects\\actions.ts",["381"],"import { Dispatch } from 'react';  \r\nimport Projects from '../../interfaces/Projects/Projects';\r\nimport * as api from '../../api/index';\r\nimport ActionsProjects from './actionsCreator'\r\nimport ProjectsConst from './constans';\r\nimport { InitialTaskData, Task } from '../../interfaces/Tasks/Tasks';\r\nimport ErrorsConst from '../Errors/constants';\r\nimport ActionsErr from '../Errors/actionsCreator';\r\n\r\ninterface History {\r\n    push: (path: string) => void,\r\n}\r\n\r\nexport const createProject = (projectData: Projects, history: History) => async (dispatch: Dispatch<ActionsProjects | ActionsErr>) => {\r\n    try {\r\n\r\n        const { data } = await api.createProject(projectData)\r\n        \r\n        dispatch({ type: ProjectsConst.CREATE_PROJECT, payload: data})\r\n        history.push('/homepage/user');\r\n    } catch(error){\r\n        dispatch({ type: ErrorsConst.ERROR_CREATE_NEW_PROJECT, payload: error.response.data})\r\n    }\r\n}\r\n\r\nexport const fetchAllProjects = () => async (dispatch :Dispatch<ActionsProjects>) => {\r\n    try {\r\n        const { data } = await api.fetchAllProjects();\r\n        const projects = data.projects;\r\n\r\n        dispatch({ type: ProjectsConst.FETCH_ALL_PROJECTS, payload: projects}); \r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchData = () => async (dispatch: Dispatch<ActionsProjects>) => {\r\n    try {\r\n        const { data } = await api.fetchData();\r\n        const selectedProjects = data.projectsForLoggedUser;\r\n        const tasks = data.tasks;\r\n\r\n        dispatch({ type: ProjectsConst.FETCH_DATA, payload: { selectedProjects, tasks}})\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const getDetailsProject = (name: string) => async (dispatch: Dispatch<ActionsProjects>) => {\r\n    try {\r\n        const { data } = await api.getDetailsProject(name)\r\n        const { project } = data;\r\n        console.log(project);\r\n        dispatch({ type: ProjectsConst.GET_DETAILS_PROJECT, payload: project})\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const editProject = (data: Projects, name: string, id: string, history: History) => async (dispatch: Dispatch<ActionsProjects | ActionsErr>) => {\r\n    try { \r\n        await api.editProject(name, data, id);\r\n        dispatch({ type: ProjectsConst.EDIT_PROJECT, payload: { data, id} });\r\n        history.push('/homepage/user');\r\n    } catch (error) {\r\n        dispatch({ type: ErrorsConst.ERROR_EDIT_PROJECT, payload: error.response.data});\r\n    }\r\n}\r\n\r\n\r\nexport const addTaskToProject = (idProject: string, task: InitialTaskData) => async (dispatch: Dispatch<ActionsProjects>) => {\r\n    try {\r\n        await api.addTaskToProject(idProject, task);\r\n\r\n        dispatch({\r\n            type: ProjectsConst.ADD_TASK_TO_PROJECT,\r\n            payload: { idProject, task }\r\n        })\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Users\\actions.ts",["382"],"import { Dispatch } from 'react';\r\nimport { Users, RegisterUserData } from '../../interfaces/Users/Users';\r\nimport * as api from '../../api';\r\nimport ActionsErr from '../Errors/actionsCreator';\r\nimport ErrorsConst from '../Errors/constants';\r\nimport ActionsUsers from './actionCreator';\r\nimport UsersConst from './constants';\r\n\r\ninterface History {\r\n    push: (path: string) => void,\r\n}\r\n\r\ninterface LoginData {\r\n    email: string | '',\r\n    user_id: number | null,\r\n    password: string | ''\r\n}\r\n\r\nexport const fetchAllUsers = () => async (dispatch: Dispatch<ActionsUsers>) => {\r\n    try {\r\n        const { data } = await api.fetchAllUsers();\r\n\r\n        dispatch({ type: UsersConst.FETCH_ALL_USERS, payload: data}) \r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const createUser = (user: RegisterUserData, history: History) => async (dispatch: Dispatch<ActionsUsers | ActionsErr>) => {\r\n    try {\r\n        const { data } = await api.createUser(user);\r\n        \r\n        dispatch({ type: UsersConst.CREATE_USER, payload: data});\r\n        history.push('/homepage/user');\r\n    }\r\n    catch (error){\r\n        dispatch({ type: ErrorsConst.ERROR_REGISTER_USER, payload: error.response.data })\r\n    }\r\n}\r\n\r\nexport const logoutUser = () => async (dispatch: Dispatch<ActionsUsers>) => {\r\n    try {\r\n        const { data } = await api.logoutUser();\r\n\r\n        dispatch({ type: UsersConst.LOGOUT_USER, payload: data})\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const loginUser = (userData: LoginData, history: History) => async (dispatch: Dispatch<ActionsUsers | ActionsErr>) => {\r\n    try {\r\n        const { data } = await api.loginUser(userData);\r\n        console.log(data);\r\n        dispatch({ type: UsersConst.LOGIN_USER, payload: data});\r\n\r\n        history.push('/homepage/user');\r\n    } catch (error) { \r\n        console.log(error.response.data);\r\n\r\n        dispatch({ type:ErrorsConst.ERROR_LOGIN_USER, payload: error.response.data})\r\n    }\r\n}\r\n\r\n// export const fetchLoggedInUser = () => async (dispatch) => {\r\n//     try {\r\n//         const { data } = await api.fetchLoggedInUser();\r\n//         const user = data.user\r\n        \r\n//         dispatch({ type: 'FETCH_LOGGEDIN_USER', payload: user})\r\n//     } catch (error) {\r\n//         console.log(error)\r\n//     }\r\n// }\r\n\r\n\r\n","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Tasks\\actions.ts",["383"],"import { Dispatch } from 'react';\r\nimport { Task } from '../../interfaces/Tasks/Tasks';\r\nimport * as api from '../../api/index';\r\nimport ActionsTasks from './actionsCreator';\r\nimport TasksConst from './constants';\r\nimport ErrorsConst from '../Errors/constants';\r\nimport ActionsErr from '../Errors/actionsCreator';\r\n\r\ninterface History {\r\n    push: (path: string) => void,\r\n}\r\n\r\nexport const selectTypeOfTask = (name: string) => {\r\n    try {\r\n        return {\r\n            type: TasksConst.SELECT_TYPE_OF_TASK,\r\n            payload: name,\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const getEmpty = () => {\r\n    try {\r\n        return {\r\n            type: TasksConst.GET_EMPTY,\r\n            payload: []\r\n            \r\n        } \r\n    } catch (error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const createNewTask = (taskData: Task, history: History) => async (dispatch: Dispatch<ActionsTasks | ActionsErr>) => {\r\n    try {\r\n        const { data } = await api.createNewTask(taskData);\r\n        history.push('/homepage/user');\r\n        dispatch({ type: TasksConst.CREATE_NEW_TASK, payload: data})\r\n        \r\n    } catch (error) {\r\n        dispatch({ type: ErrorsConst.ERROR_CREATE_NEW_TASK, payload: error.response.data})\r\n    }\r\n}\r\n\r\nexport const startTask = (id: string) => {\r\n    try {\r\n        return {\r\n            type: TasksConst.START_TASK,\r\n            payload: { id }\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const stopTask = (id: string, time: number) => {\r\n    try {\r\n        console.log(time)\r\n        return {\r\n            type: TasksConst.STOP_TASK,\r\n            payload: {\r\n                id,\r\n                time: Number(time),\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchAllTasks = () => async (dispatch: Dispatch<ActionsTasks>) => {\r\n    try {\r\n        const { data } = await api.fetchData();\r\n        const tasks = data.tasks;\r\n        return {\r\n            type: TasksConst.FETCH_ALL_TASKS,\r\n            payload: {\r\n                tasks,\r\n            }\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const closeTask = (idTask: string, isFinish: boolean) => {\r\n    try {\r\n        return {\r\n            type: TasksConst.CLOSE_TASK,\r\n            payload: { id: idTask, isFinish}\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const updateTask = (idTask: string, isFinish: boolean, taskTime: number, addedTime: number = 0) => async(dispatch: Dispatch<ActionsTasks>) => {\r\n    try {\r\n        // taskTime - dotychczasowy czas\r\n        // addedTime - czas który chcemy dodac\r\n        const { data } = await api.updateTask(idTask, isFinish, taskTime, addedTime);\r\n \r\n        dispatch({\r\n            type: TasksConst.UPDATE_TASK,\r\n            payload: { id: idTask, isFinish, taskTime, addedTime }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\LogoutSection.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\Header.tsx",["384"],"import { useContext, useState } from 'react';\r\nimport { useHistory, withRouter } from 'react-router-dom';\r\nimport styled, { css } from 'styled-components';\r\nimport menuIcon from '../assets/menuIcon.svg';\r\nimport mailIcon from '../assets/mailIcon.svg';\r\nimport UserContext from '../context/UserContext';\r\nimport HiddenMenu from './HiddenMenu';\r\nimport { Logo } from '../components/Heading/Heading';\r\nimport { LoginButton } from '../components/Button/Button';\r\nimport { ThemeContext, ThemeType } from '../context/theme';\r\n\r\nconst Wrapper = styled.div<{ readonly typeTheme :string}>`\r\n    height: 50px;\r\n    display: flex;\r\n    flex: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 0 33px;\r\n    background-color: ${props => props.typeTheme === ThemeType.Light ? '#F9FAFF' : '#09131D'};\r\n\r\n    @media(min-width: 1360px){\r\n        justify-content: space-around;\r\n    }\r\n`;\r\n\r\nconst IconsDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n\r\n`;\r\n\r\nconst Icon = styled.div<{ readonly bcgIcon :string}>`\r\n    width: 30px;\r\n    height: 30px;\r\n    box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.16);\r\n    border-radius: 50%;\r\n    margin-left: 30px;\r\n    cursor: pointer;\r\n    background-color: white;\r\n\r\n    ${({ bcgIcon }) => bcgIcon && css`\r\n    \r\n        background-image: url(${bcgIcon});\r\n        background-position: center;\r\n        background-repeat: no-repeat;\r\n    `}\r\n`;\r\n\r\nconst BackButton = styled(LoginButton)`\r\n    width: 60px;\r\n    height: 30px;\r\n    font-size: 12px;\r\n    font-weight: 700;\r\n    border: none;\r\n    box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.16);\r\n    margin-left: 30px;\r\n`;\r\n\r\ninterface Props {\r\n    match: {\r\n        path: string,\r\n    }\r\n}\r\n\r\nconst Header = (props :Props) => {\r\n\r\n    const { user } = useContext(UserContext);\r\n    const { typeTheme, ThemeType } = useContext(ThemeContext);\r\n    const [showHiddenMenu, setShowHiddenMenu] = useState(false);\r\n    const history = useHistory();\r\n    const hiddenBackBtn = props.match.path === \"/homepage\" || props.match.path === \"/homepage/user\";\r\n\r\n    \r\n    return(\r\n        <>\r\n            {\r\n                !showHiddenMenu && (\r\n                    <Wrapper typeTheme={typeTheme}>\r\n                        <Logo typeTheme={typeTheme}>Planner</Logo>\r\n                        <IconsDiv>\r\n                            {\r\n                                user && (\r\n                                    <>\r\n                                        <Icon bcgIcon={mailIcon} onClick={() => history.push({\r\n                                            pathname: `/homepage/message`,\r\n                                        })} />\r\n                                    </>\r\n                                )\r\n                            }\r\n                            <Icon bcgIcon={menuIcon} onClick={() => setShowHiddenMenu(prev => !prev)} />\r\n\r\n                            {\r\n                                !hiddenBackBtn && ( <BackButton onClick={ () => history.goBack()}>Wróc</BackButton> )\r\n                            }\r\n                            \r\n\r\n                        </IconsDiv>\r\n                    </Wrapper>\r\n                )\r\n            }\r\n            <HiddenMenu isActive={showHiddenMenu} exitHiddenMenu={() => setShowHiddenMenu(false)} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Header);","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\Footer.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\JoinUsSection.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\FAQSection.tsx",["385"],"import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Heading } from '../components/Heading/Heading';\r\nimport { data } from '../data';\r\nimport QAPlannerCard from '../molecules/QAPlannerCard/QAPlannerCard';\r\n\r\nconst Wrapper = styled.section`\r\n    width: 100vw;\r\n    min-height: 800px;\r\n`;\r\n\r\n\r\nconst FAQSection = () => {\r\n\r\n    const [activeCard, setActiveCard] = useState(false)\r\n\r\n    const handleClick = () => {\r\n        setActiveCard(!activeCard)\r\n    }\r\n\r\n    return(\r\n        <Wrapper >\r\n            <Heading>Chcesz poznać nasze narzędzie?</Heading>\r\n            {\r\n                data.faq.map(item => (\r\n                    <QAPlannerCard \r\n                        key={item.id}\r\n                        id={item.id}\r\n                        question={item.question}\r\n                        answer={item.answer}\r\n                    />\r\n                ))\r\n            }\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default FAQSection;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\ProfileSection.tsx",["386","387","388"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Paragraph } from '../components/Paragraph/Paragraph';\r\nimport userIcon from '../assets/user.svg';\r\nimport { SubHeading } from '../components/Heading/Heading';\r\nimport { SliderTheme } from '../molecules/SliderTheme/SliderTheme';\r\nimport UserContext from '../context/UserContext';\r\nimport { ThemeContext, ThemeType } from '../context/theme';\r\nimport LoadingWrapper from '../molecules/LoadingWrapper/LoadingWrapper';\r\n\r\nconst Wrapper = styled.section<{ readonly typeTheme :string }>`\r\n    height: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    background-color: ${ props => props.typeTheme === ThemeType.Light ? '#F9FAFF' : '#09131D'};\r\n`;\r\n\r\nconst ProfileParagraph = styled(Paragraph)<{ readonly typeTheme :string }>`\r\n    width: 60%;\r\n    text-align: center;\r\n    margin-top: 20px;\r\n    color: ${ props => props.typeTheme === ThemeType.Light ? '#000' : '#FFF'};\r\n`;\r\n\r\nconst BorderImageUser = styled.div`\r\n    position: relative;\r\n    width: 130px;\r\n    height: 130px;\r\n    border: 2px solid #372FFF;\r\n    border-radius: 50%;\r\n    background-color: transparent;\r\n`;\r\n\r\nconst ImageUser = styled.div<{ readonly icon :string}>`\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: 120px;\r\n    height: 120px;\r\n    border-radius: 50%;\r\n    background-image: url(${({ icon }) => icon});\r\n    padding: 40px;\r\n`;\r\n\r\nconst NameHeading = styled(SubHeading)`\r\n    font-size: 30px;\r\n    color: ${props => props.typeTheme === ThemeType.Light ? '#22005F' : '#0903B0'};\r\n`;\r\n\r\nconst PositionParagprah = styled(Paragraph)<{ readonly typeTheme :string}>`\r\n    font-size: 20px;\r\n    color: ${props => props.typeTheme === ThemeType.Light ? 'black' : 'white'};\r\n`;\r\n\r\nconst SpanLogout = styled.span`\r\n    color: #0903B0;\r\n    font-weight: 700;\r\n`;\r\n\r\nconst ProfileSection = () => {\r\n\r\n    const { user, getUser } = useContext(UserContext);\r\n    const { typeTheme, ThemeType } = useContext(ThemeContext);\r\n\r\n    useEffect(() => {\r\n        getUser()\r\n    }, [])\r\n\r\n    if(user === null) {\r\n        return(\r\n            <LoadingWrapper />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Wrapper typeTheme={typeTheme}>\r\n            <ProfileParagraph typeTheme={typeTheme}>Pamiętaj, aby po zakończonej pracy <SpanLogout>wylogować się</SpanLogout> z konta</ProfileParagraph>\r\n            <BorderImageUser>\r\n                <ImageUser icon={userIcon} />\r\n            </BorderImageUser>\r\n            <NameHeading typeTheme={typeTheme}>{`${user[0].name} ${user[0].surname}`}</NameHeading>\r\n            <PositionParagprah typeTheme={typeTheme}>{`${user[0].position}`}</PositionParagprah>\r\n            <SliderTheme />\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default ProfileSection;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\PlannerFunc.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\Banner.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\ProfitabilityProjectSection.tsx",["389"],"import styled from 'styled-components';\r\nimport { SubHeading } from '../components/Heading/Heading';\r\nimport { Paragraph } from '../components/Paragraph/Paragraph';\r\nimport Projects from '../interfaces/Projects/Projects';\r\nimport ProfabilityRow from '../molecules/ProfabilityRow/ProfabilityRow';\r\n\r\n\r\nconst Wrapper = styled.section`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n    margin-top: 46px;\r\n    margin-bottom: 50px;\r\n`;\r\n\r\nconst ProfabilitySubHeading = styled(SubHeading)`\r\n    font-size: 15px;\r\n    font-weight: 800;\r\n    text-align: left;\r\n`;\r\n\r\nconst BriefDiv = styled.div`\r\n    margin: 30px auto 30px auto;\r\n    width: 70%;\r\n`;\r\n\r\nconst BriefParagraph = styled(Paragraph)<{ textColor: boolean}>`\r\n    text-align: center;\r\n    color: ${ props => props.textColor ? 'green' : 'red'};\r\n`;\r\n\r\ninterface IProps {\r\n    projectValue: number,\r\n    hours: number,\r\n}\r\n\r\nconst ProfabilityProjectSection = ({ projectValue, hours } :IProps) => {\r\n\r\n    const value = Number(projectValue).toFixed(2);\r\n    const costRateForOneHour = 1000; \r\n    \r\n    const countTotalCostOfProject = (hourRate: number, allHoursOfProject: number): number => {\r\n        return hourRate * allHoursOfProject;\r\n    }\r\n\r\n    const totalCost = countTotalCostOfProject(costRateForOneHour, hours);\r\n\r\n    const countEstimatedProfit = (totalCost: number, projectValue: number): number => {\r\n        return projectValue - totalCost;\r\n    }\r\n\r\n    return(\r\n        <Wrapper>\r\n            <ProfabilitySubHeading>Szczegóły</ProfabilitySubHeading>\r\n            <ProfabilityRow category=\"value\" amount={`${value} PLN`} />\r\n            <ProfabilityRow category=\"cost\" amount={`${totalCost} PLN`} />\r\n            <ProfabilityRow category=\"profit\" amount={`${countEstimatedProfit(totalCost, projectValue)} PLN`} />\r\n            <BriefDiv>\r\n                {\r\n                    countEstimatedProfit(totalCost, projectValue) > 0 ? (\r\n                        <BriefParagraph textColor={true} >Limit czasu przeznaczonego na wykonanie projektu \r\n                        został osiągnięty. Projekt jest rentowny i osiągnął planowany zysk.</BriefParagraph>\r\n                    ) : (\r\n                        <BriefParagraph textColor={false}>Limit czasu przeznaczonego na wykonanie projektu został \r\n                        przekroczony. Projekt poniósł stratę.</BriefParagraph>\r\n                    )\r\n                }\r\n            </BriefDiv>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfabilityProjectSection;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\LabelSection.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\components\\Input\\Input.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\components\\TextArea\\TextArea.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\ErrorMessage\\ErrorMessage.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\components\\Paragraph\\Paragraph.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\components\\Button\\Button.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\components\\Heading\\Heading.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\PersonToProject\\PersonToProject.tsx",["390"],"import { useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport userIcon from '../../assets/user.svg';\r\nimport acceptingIcon from '../../assets/accept.svg';\r\nimport { SubHeading } from '../../components/Heading/Heading';\r\nimport { Paragraph } from '../../components/Paragraph/Paragraph';\r\n\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin: 15px 0px;\r\n\r\n    :first-of-type{\r\n        margin-top: 50px;\r\n    }\r\n`;\r\n\r\nconst BorderImg = styled.div`\r\n    position: relative;\r\n    width: 51px;\r\n    height: 51px;\r\n    border: 2px solid #372FFF;\r\n    border-radius: 50%;\r\n    background-color: transparent;\r\n`;\r\n\r\nconst Img = styled.div<{ readonly icon: string}>`\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: 45px;\r\n    height: 45px;\r\n    border-radius: 50%;\r\n    background-image: url(${({ icon }) => icon});\r\n    \r\n`;\r\n\r\nconst MiddleDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-evenly;\r\n`;\r\n\r\nconst RightDiv = styled.div<{ readonly icon: string, readonly userSelect: boolean}>`\r\n    border: 1px solid #D1D1D1;\r\n    width: 41px;\r\n    height: 41px;\r\n    background-color: #D1D1D1;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    background-image: none;\r\n\r\n    ${({ userSelect }) => userSelect && css<{readonly icon: string}>`\r\n        background-image: url(${({ icon }) => icon });\r\n        background-position: center;\r\n        background-repeat: no-repeat;\r\n        background-color: #00BD51;\r\n    `}\r\n`;\r\n\r\ninterface IProps {\r\n    name: string, \r\n    surname: string,\r\n    position: string | 'pracownik',\r\n    id: string,\r\n    department: string,\r\n    assignUserToProject: (id: string, department: string) => void,\r\n    assignUsersFromEditProject: string[],\r\n    isFromEdition?: boolean,\r\n}\r\n\r\nconst PersonToProject = ({ name, surname, position, id, department, assignUserToProject, assignUsersFromEditProject, isFromEdition }: IProps) => {\r\n\r\n    const [ isAccept, setIsAccept ] = useState(false);\r\n    const [ usedEditionData , setUsedEditionData ] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if(isFromEdition){\r\n            assignUsersFromEdition(assignUsersFromEditProject);\r\n        }\r\n    },[])\r\n\r\n    const handleClick = () => {\r\n        setIsAccept(prev => !prev);\r\n        assignUserToProject(id, department);\r\n    }\r\n\r\n    const assignUsersFromEdition = (usersId: string[]) => {\r\n        if(usedEditionData){\r\n            setUsedEditionData(false);\r\n            if(usersId.length > 1){\r\n                if(usersId.includes(id)){\r\n                    setIsAccept(true);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Wrapper>\r\n             <BorderImg>\r\n                 <Img icon={userIcon} />\r\n             </BorderImg>\r\n             <MiddleDiv>\r\n                <SubHeading>{name} {surname}</SubHeading>\r\n                <Paragraph>{position}</Paragraph>\r\n             </MiddleDiv>\r\n             <RightDiv icon={acceptingIcon} onClick={() => handleClick()} userSelect={isAccept} />\r\n             {/* userSelect = true - oznaczenie usera ptaszkiem */}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default PersonToProject;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\LoadingWrapper\\LoadingWrapper.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Departments\\constants.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\api\\index.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\HiddenMenu.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\RatesSection.tsx",["391"],"import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { fetchAllRates } from '../store/Rates/actions';\r\nimport { LoginButton } from '../components/Button/Button';\r\nimport { SubHeading } from '../components/Heading/Heading';\r\nimport DefaultRootState from '../interfaces/DefaultRootState/DefaultRootState';\r\nimport RateRow from '../molecules/RateRow/RateRow';\r\n\r\nconst Wrapper = styled.section`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 70px auto 0 auto;\r\n    width: 315px;\r\n\r\n`;\r\nconst RateSectionSubHeading = styled(SubHeading)`\r\n    margin-bottom: 30px;\r\n`;\r\n\r\nconst RateBtn = styled(LoginButton)`\r\n    margin-top: 40px;\r\n`;\r\n\r\nconst RatesSection = () => {\r\n\r\n    const rates = useSelector((state :DefaultRootState) => state.rates);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchAllRates())\r\n    },[])\r\n\r\n    return(\r\n        <Wrapper>\r\n            <RateSectionSubHeading>Przeciętne stawki <br /> godzinowe pracowników</RateSectionSubHeading>\r\n            {\r\n                rates.map(item => (\r\n                    <RateRow\r\n                        key={item._id}\r\n                        position={item.position}\r\n                        rate={item.rate} \r\n                        id={item._id}\r\n                        _id={item._id}\r\n                    />\r\n                ))\r\n            }\r\n            <RateBtn>Dodaj stanowisko</RateBtn>\r\n\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default RatesSection;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\ProjectCard\\ProjectCard.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\QAPlannerCard\\QAPlannerCard.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\SliderTheme\\SliderTheme.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\ProfabilityRow\\ProfabilityRow.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\FuncPlannerCard\\FuncPlannerCard.tsx",["392"],"import styled from 'styled-components';\r\nimport { SubHeading } from '../../components/Heading/Heading';\r\nimport { LPParagraph, Paragraph } from '../../components/Paragraph/Paragraph';\r\n\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    align-items: center;\r\n    padding: 0 37px;\r\n    margin: 30px auto;\r\n    \r\n    @media(min-width: 1360px){\r\n        width: 400px;\r\n    }\r\n`;\r\n\r\nconst NumberParagraph = styled(LPParagraph)`\r\n    margin-right: 26px;\r\n    font-weight: 700;\r\n`;\r\n\r\nconst SubHeadingFuncPlannerCard = styled(SubHeading)`\r\n    text-align: left;\r\n`;\r\n\r\ninterface Props {\r\n    content: string,\r\n    id: number,\r\n}\r\n\r\nconst FuncPlannerCard = ({ content, id }: Props) => {\r\n    return(\r\n        <Wrapper>\r\n            <NumberParagraph>{id}</NumberParagraph>\r\n            <SubHeadingFuncPlannerCard>{content}</SubHeadingFuncPlannerCard>        \r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default FuncPlannerCard;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\Card\\Card.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\RateRow\\RateRow.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Rates\\actions.ts",["393"],"import { Dispatch } from 'react';\r\nimport * as api from '../../api/index';\r\nimport ActionsRates from './actionsCreator';\r\nimport RatesConst from './constants';\r\n\r\nexport const fetchAllRates = () => async (dispatch: Dispatch<ActionsRates>) => {\r\n    try {\r\n        const { data } = await api.fetchData();\r\n        const rates = data.rates;\r\n\r\n        dispatch({ type: RatesConst.FETCH_ALL_RATES, payload: rates});\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const editRate = (id: string, value: number) => async (dispatch: Dispatch<ActionsRates>) => {\r\n    try {\r\n        const { data } = await api.editRate(id, value);\r\n\r\n        dispatch({ type: RatesConst.EDIT_RATE, payload: { id, value }})\r\n        \r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\organisms\\TasksSection.tsx",["394"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Input } from '../components/Input/Input';\r\nimport UserContext from '../context/UserContext';\r\nimport DefaultRootState from '../interfaces/DefaultRootState/DefaultRootState';\r\nimport TaskCard from '../molecules/TaskCard/TaskCard';\r\n\r\nconst TaskInput = styled(Input)`\r\n    margin-bottom: 30px;\r\n`;\r\n\r\nconst TaskSection  = () => {\r\n\r\n    const tasks = useSelector((state :DefaultRootState) => state.tasks.tasks)\r\n    const { user, getUser } = useContext(UserContext);\r\n    const [ searchTask, setSearchTask ] = useState('');\r\n\r\n    useEffect(() => {\r\n        <TaskSection />\r\n    }, [tasks]);\r\n\r\n    //wydzielamy zadania dla zalogowanego aktualnie użytkownika - tylko takie chcemy wyświetlać\r\n    const tasksForUser = tasks.filter(item => item.taskUsers.includes(user[0]._id));\r\n\r\n    const handleChange = (e :React.SyntheticEvent) => {\r\n        e.preventDefault();\r\n        const target = e.target as HTMLTextAreaElement;\r\n        setSearchTask(target.value);\r\n    }\r\n    let filterTaskFromInput = [...tasksForUser];\r\n\r\n    if(searchTask !== ''){\r\n        const inputSearchValue = searchTask.toString().toLowerCase(); // wartosc wyszukiwana przez użytkownika\r\n        filterTaskFromInput = tasksForUser.filter(item => \r\n            item.title.toLowerCase().includes(inputSearchValue) || item.categoryTask[0].toString().toLowerCase().includes(inputSearchValue)\r\n        );\r\n        \r\n    };\r\n\r\n    return(\r\n        <>\r\n            <TaskInput placeholder=\"Wpisz nazwę zadania\" value={searchTask} onChange={(e) => handleChange(e) } />\r\n            {\r\n\r\n                filterTaskFromInput.map( item=> (\r\n                    <TaskCard\r\n                        key={item._id} \r\n                        division={item.categoryTask}\r\n                        title={item.title}\r\n                        time={item.time}\r\n                        id={item._id}\r\n                        taskTime={item.taskTime}\r\n                        isFinish={item.isFinish}\r\n                    />\r\n                ))\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskSection;","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\index.tsx",["395","396","397"],"import ReactDOM from 'react-dom';\r\nimport thunk from 'redux-thunk';\r\nimport { DefaultRootState, Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport reducers from './store/index';\r\nimport App from './App';\r\n\r\nfunction saveToLocalStorage(state: DefaultRootState) {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('state', serializedState);\r\n    \r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nfunction loadFromLocalStorage() {\r\n  try {\r\n    const serializedState = localStorage.getItem('state')\r\n    if(serializedState === null) return undefined\r\n    return JSON.parse(serializedState);\r\n  } catch (error) {\r\n    console.log(error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\n// const composeEnhancers =\r\n//   typeof window === 'object' &&\r\n//   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n//       // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n//     }) : compose;\r\n\r\nconst composeEnhancers =\r\n  (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(thunk),\r\n  // other store enhancers if any\r\n);\r\n\r\nconst persistedState = loadFromLocalStorage();\r\n\r\nconst store = createStore(reducers, persistedState, enhancer);\r\n\r\n// const store = createStore(reducers, compose(applyMiddleware(thunk)))\r\n\r\nstore.subscribe(() => saveToLocalStorage(store.getState()))\r\n\r\n\r\n\r\nReactDOM.render(\r\n\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\context\\theme.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\context\\UserContext.tsx",["398"],"import Axios from 'axios';\r\nimport { createContext, useEffect, useState } from 'react'\r\nimport { Users } from '../interfaces/Users/Users';\r\nimport domain from '../util/domain';\r\n\r\n\r\nconst initialState: InitialState = {\r\n    user: {},\r\n    getUser: () => new Promise(() => console.log('')),\r\n}\r\n\r\ninterface InitialState  {\r\n    user: any,\r\n    getUser: () => Promise<void>\r\n}\r\n\r\nconst UserContext = createContext(initialState);\r\n\r\nfunction UserContextProvider(props: any) {\r\n    const [user, setUser] = useState(null);\r\n\r\n    async function getUser(){\r\n        const userRes = await Axios.get(`${domain}/homepage/user`);\r\n        setUser(userRes.data.user);\r\n        // console.log(userRes.data.user);\r\n        // console.log(user);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUser();\r\n    }, []);\r\n\r\n    return (\r\n        <UserContext.Provider value={{ user, getUser }} >\r\n            {props.children}\r\n        </UserContext.Provider>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default UserContext;\r\nexport { UserContextProvider };\r\n\r\n","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\data\\index.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\MessagesPage.tsx",["399"],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\molecules\\MessageCard\\MessageCard.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\CreateMessagePage.tsx",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Messages\\reducer.ts",["400"],"import Messages from '../../interfaces/Messages/Messages';\r\nimport MessagesConst from './constants';\r\nimport ActionsMessages from './actionCreator';\r\n\r\ninterface MessagesState {\r\n    messages: Array<Messages>,\r\n}\r\n\r\nconst initialState: MessagesState = {\r\n    messages: [],\r\n}\r\n\r\nexport default (state: MessagesState = initialState, action: ActionsMessages) => {\r\n    switch(action.type){\r\n        case MessagesConst.SHOW_ALL_MESSAGES:\r\n            return action.payload;\r\n        case MessagesConst.CREATE_NEW_MESSAGE: \r\n            return {\r\n                messages: [...state.messages, action.payload],\r\n            };\r\n        default:\r\n            return state;\r\n        }\r\n}","C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Messages\\constants.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\store\\Messages\\actions.ts",[],"C:\\Users\\WebDev\\Portfolio\\Planner\\frontend\\app\\src\\views\\DetailsMessage.tsx",["401"],{"ruleId":"402","severity":1,"message":"403","line":78,"column":24,"nodeType":"404","messageId":"405","endLine":78,"endColumn":33},{"ruleId":"406","severity":1,"message":"407","line":90,"column":8,"nodeType":"408","endLine":90,"endColumn":10,"suggestions":"409"},{"ruleId":"406","severity":1,"message":"410","line":101,"column":8,"nodeType":"408","endLine":101,"endColumn":27,"suggestions":"411"},{"ruleId":"412","replacedBy":"413"},{"ruleId":"414","replacedBy":"415"},{"ruleId":"402","severity":1,"message":"403","line":69,"column":24,"nodeType":"404","messageId":"405","endLine":69,"endColumn":33},{"ruleId":"402","severity":1,"message":"403","line":95,"column":24,"nodeType":"404","messageId":"405","endLine":95,"endColumn":33},{"ruleId":"406","severity":1,"message":"416","line":101,"column":8,"nodeType":"408","endLine":101,"endColumn":18,"suggestions":"417"},{"ruleId":"406","severity":1,"message":"418","line":105,"column":8,"nodeType":"408","endLine":105,"endColumn":10,"suggestions":"419"},{"ruleId":"402","severity":1,"message":"420","line":89,"column":24,"nodeType":"404","messageId":"405","endLine":89,"endColumn":35},{"ruleId":"421","severity":1,"message":"422","line":6,"column":1,"nodeType":"423","endLine":17,"endColumn":2},{"ruleId":"421","severity":1,"message":"422","line":15,"column":1,"nodeType":"423","endLine":52,"endColumn":2},{"ruleId":"421","severity":1,"message":"422","line":4,"column":1,"nodeType":"423","endLine":19,"endColumn":2},{"ruleId":"421","severity":1,"message":"422","line":15,"column":1,"nodeType":"423","endLine":93,"endColumn":2},{"ruleId":"421","severity":1,"message":"422","line":6,"column":1,"nodeType":"423","endLine":31,"endColumn":2},{"ruleId":"421","severity":1,"message":"422","line":6,"column":1,"nodeType":"423","endLine":22,"endColumn":2},{"ruleId":"402","severity":1,"message":"424","line":2,"column":8,"nodeType":"404","messageId":"405","endLine":2,"endColumn":14},{"ruleId":"402","severity":1,"message":"425","line":58,"column":11,"nodeType":"404","messageId":"405","endLine":58,"endColumn":22},{"ruleId":"402","severity":1,"message":"426","line":102,"column":12,"nodeType":"404","messageId":"405","endLine":102,"endColumn":17},{"ruleId":"406","severity":1,"message":"427","line":121,"column":8,"nodeType":"408","endLine":121,"endColumn":10,"suggestions":"428"},{"ruleId":"406","severity":1,"message":"429","line":149,"column":8,"nodeType":"408","endLine":149,"endColumn":16,"suggestions":"430"},{"ruleId":"406","severity":1,"message":"431","line":158,"column":8,"nodeType":"408","endLine":158,"endColumn":24,"suggestions":"432"},{"ruleId":"402","severity":1,"message":"433","line":1,"column":10,"nodeType":"404","messageId":"405","endLine":1,"endColumn":19},{"ruleId":"402","severity":1,"message":"434","line":9,"column":10,"nodeType":"404","messageId":"405","endLine":9,"endColumn":21},{"ruleId":"402","severity":1,"message":"435","line":10,"column":10,"nodeType":"404","messageId":"405","endLine":10,"endColumn":27},{"ruleId":"402","severity":1,"message":"436","line":20,"column":27,"nodeType":"404","messageId":"405","endLine":20,"endColumn":31},{"ruleId":"406","severity":1,"message":"437","line":134,"column":8,"nodeType":"408","endLine":134,"endColumn":24,"suggestions":"438"},{"ruleId":"406","severity":1,"message":"439","line":143,"column":8,"nodeType":"408","endLine":143,"endColumn":16,"suggestions":"440"},{"ruleId":"406","severity":1,"message":"441","line":150,"column":7,"nodeType":"408","endLine":150,"endColumn":17,"suggestions":"442"},{"ruleId":"402","severity":1,"message":"436","line":6,"column":27,"nodeType":"404","messageId":"405","endLine":6,"endColumn":31},{"ruleId":"402","severity":1,"message":"443","line":2,"column":10,"nodeType":"404","messageId":"405","endLine":2,"endColumn":15},{"ruleId":"402","severity":1,"message":"444","line":104,"column":17,"nodeType":"404","messageId":"405","endLine":104,"endColumn":21},{"ruleId":"402","severity":1,"message":"403","line":70,"column":24,"nodeType":"404","messageId":"405","endLine":70,"endColumn":33},{"ruleId":"402","severity":1,"message":"445","line":17,"column":11,"nodeType":"404","messageId":"405","endLine":17,"endColumn":22},{"ruleId":"402","severity":1,"message":"446","line":1,"column":40,"nodeType":"404","messageId":"405","endLine":1,"endColumn":48},{"ruleId":"402","severity":1,"message":"403","line":67,"column":24,"nodeType":"404","messageId":"405","endLine":67,"endColumn":33},{"ruleId":"406","severity":1,"message":"447","line":71,"column":8,"nodeType":"408","endLine":71,"endColumn":10,"suggestions":"448"},{"ruleId":"402","severity":1,"message":"449","line":4,"column":8,"nodeType":"404","messageId":"405","endLine":4,"endColumn":16},{"ruleId":"406","severity":1,"message":"450","line":87,"column":7,"nodeType":"408","endLine":87,"endColumn":9,"suggestions":"451"},{"ruleId":"406","severity":1,"message":"410","line":34,"column":7,"nodeType":"408","endLine":34,"endColumn":9,"suggestions":"452"},{"ruleId":"402","severity":1,"message":"453","line":3,"column":23,"nodeType":"404","messageId":"405","endLine":3,"endColumn":32},{"ruleId":"402","severity":1,"message":"444","line":19,"column":17,"nodeType":"404","messageId":"405","endLine":19,"endColumn":21},{"ruleId":"402","severity":1,"message":"454","line":16,"column":19,"nodeType":"404","messageId":"405","endLine":16,"endColumn":26},{"ruleId":"402","severity":1,"message":"455","line":5,"column":10,"nodeType":"404","messageId":"405","endLine":5,"endColumn":22},{"ruleId":"402","severity":1,"message":"456","line":5,"column":24,"nodeType":"404","messageId":"405","endLine":5,"endColumn":38},{"ruleId":"402","severity":1,"message":"457","line":6,"column":8,"nodeType":"404","messageId":"405","endLine":6,"endColumn":15},{"ruleId":"402","severity":1,"message":"443","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":15},{"ruleId":"406","severity":1,"message":"458","line":58,"column":8,"nodeType":"408","endLine":58,"endColumn":10,"suggestions":"459"},{"ruleId":"421","severity":1,"message":"422","line":13,"column":1,"nodeType":"423","endLine":24,"endColumn":2},{"ruleId":"406","severity":1,"message":"460","line":106,"column":7,"nodeType":"408","endLine":106,"endColumn":9,"suggestions":"461"},"@typescript-eslint/no-unused-vars","'ThemeType' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'getUser'. Either include them or remove the dependency array.","ArrayExpression",["462"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["463"],"no-native-reassign",["464"],"no-negated-in-lhs",["465"],"React Hook useEffect has a missing dependency: 'time'. Either include it or remove the dependency array. If 'setPercentCompleteOfTheTask' needs the current value of 'time', you can also switch to useReducer instead of useState and read 'time' in the reducer.",["466"],"React Hook useEffect has a missing dependency: 'time'. Either include it or remove the dependency array. If 'setTimeForAllTask' needs the current value of 'time', you can also switch to useReducer instead of useState and read 'time' in the reducer.",["467"],"'changeTheme' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'styled' is defined but never used.","'ProjectData' is defined but never used.","'users' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'fetchUsers'. Either include them or remove the dependency array.",["468"],"React Hook useEffect has missing dependencies: 'assumptions', 'content', 'customer', 'customerInfo', 'deadline', 'departments', 'dispatch', 'fetchDepartments', 'hours', 'isEdited', 'isEditedDataUpdate', 'name', 'nameActiveDepartments', 'projectData', 'projectUsers', 'projectValue', and 'scopeOfWork'. Either include them or remove the dependency array. You can also do a functional update 'setProjectData(p => ...)' if you only need 'projectData' in the 'setProjectData' call.",["469"],"React Hook useEffect has missing dependencies: 'idUsersAssignToProject', 'isEdited', 'isEditedIdAssign', and 'projectUsers'. Either include them or remove the dependency array. You can also do a functional update 'setIdUsersAssignToProject(i => ...)' if you only need 'idUsersAssignToProject' in the 'setIdUsersAssignToProject' call.",["470"],"'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'getDetailsProject' is defined but never used.","'Task' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'idUserAssign'. Either include them or remove the dependency array. You can also do a functional update 'setIdUserAssign(i => ...)' if you only need 'idUserAssign' in the 'setIdUserAssign' call.",["471"],"React Hook useEffect has missing dependencies: 'categoryTask', 'id', 'name', and 'taskData'. Either include them or remove the dependency array. You can also do a functional update 'setTaskData(t => ...)' if you only need 'taskData' in the 'setTaskData' call.",["472"],"React Hook useEffect has missing dependencies: 'halfTimeReport' and 'taskData'. Either include them or remove the dependency array. You can also do a functional update 'setTaskData(t => ...)' if you only need 'taskData' in the 'setTaskData' call.",["473"],"'Users' is defined but never used.","'data' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["474"],"'Projects' is defined but never used.","React Hook useEffect has missing dependencies: 'assignUsersFromEditProject', 'assignUsersFromEdition', and 'isFromEdition'. Either include them or remove the dependency array.",["475"],["476"],"'Paragraph' is defined but never used.","'getUser' is assigned a value but never used.","'persistStore' is defined but never used.","'persistReducer' is defined but never used.","'storage' is defined but never used.","React Hook useEffect has missing dependencies: 'auth.email' and 'dispatch'. Either include them or remove the dependency array.",["477"],"React Hook useEffect has missing dependencies: 'messageData', 'sender', and 'title'. Either include them or remove the dependency array. You can also do a functional update 'setMessageData(m => ...)' if you only need 'messageData' in the 'setMessageData' call.",["478"],{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},"no-global-assign","no-unsafe-negation",{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"497","fix":"498"},{"desc":"499","fix":"500"},{"desc":"501","fix":"502"},{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},"Update the dependencies array to be: [dispatch, getUser]",{"range":"509","text":"510"},"Update the dependencies array to be: [dispatch, typeOfMainSection]",{"range":"511","text":"512"},"Update the dependencies array to be: [taskTime, time]",{"range":"513","text":"514"},"Update the dependencies array to be: [time]",{"range":"515","text":"516"},"Update the dependencies array to be: [dispatch, fetchUsers]",{"range":"517","text":"518"},"Update the dependencies array to be: [assumptions, content, customer, customerInfo, deadline, departments, dispatch, fetchDepartments, hours, isEdited, isEditedDataUpdate, name, nameActiveDepartments, projectData, projectUsers, projectValue, scopeOfWork, status]",{"range":"519","text":"520"},"Update the dependencies array to be: [changeDetektor, idUsersAssignToProject, isEdited, isEditedIdAssign, projectUsers]",{"range":"521","text":"522"},"Update the dependencies array to be: [changeDetektor, dispatch, idUserAssign]",{"range":"523","text":"524"},"Update the dependencies array to be: [categoryTask, id, name, status, taskData]",{"range":"525","text":"526"},"Update the dependencies array to be: [halfTimeReport, isAccept, taskData]",{"range":"527","text":"528"},"Update the dependencies array to be: [getUser]",{"range":"529","text":"530"},"Update the dependencies array to be: [assignUsersFromEditProject, assignUsersFromEdition, isFromEdition]",{"range":"531","text":"532"},"Update the dependencies array to be: [dispatch]",{"range":"533","text":"534"},"Update the dependencies array to be: [auth.email, dispatch]",{"range":"535","text":"536"},"Update the dependencies array to be: [messageData, sender, title]",{"range":"537","text":"538"},[3082,3084],"[dispatch, getUser]",[3596,3615],"[dispatch, typeOfMainSection]",[3138,3148],"[taskTime, time]",[3229,3231],"[time]",[4084,4086],"[dispatch, fetchUsers]",[5008,5016],"[assumptions, content, customer, customerInfo, deadline, departments, dispatch, fetchDepartments, hours, isEdited, isEditedDataUpdate, name, nameActiveDepartments, projectData, projectUsers, projectValue, scopeOfWork, status]",[5283,5299],"[changeDetektor, idUsersAssignToProject, isEdited, isEditedIdAssign, projectUsers]",[3924,3940],"[changeDetektor, dispatch, idUserAssign]",[4123,4131],"[categoryTask, id, name, status, taskData]",[4252,4262],"[halfTimeReport, isAccept, taskData]",[2204,2206],"[getUser]",[2406,2408],"[assignUsersFromEditProject, assignUsersFromEdition, isFromEdition]",[1001,1003],"[dispatch]",[1739,1741],"[auth.email, dispatch]",[2667,2669],"[messageData, sender, title]"]